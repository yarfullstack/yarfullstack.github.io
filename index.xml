<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>YarFullStack</title>
    <link>https://yarfullstack.com/index.xml</link>
    <description>Recent content on YarFullStack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <copyright>© 2016 OlegAxenow. &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34; rel=&#34;nofollow&#34; class=&#34;mb-ml&#34; target=&#34;_blank&#34;&gt;Some rights reserved.&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 03 Feb 2017 12:31:41 +0300</lastBuildDate>
    <atom:link href="https://yarfullstack.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Новости февраля (и января)</title>
      <link>https://yarfullstack.com/post/2017-02/news/</link>
      <pubDate>Fri, 03 Feb 2017 12:31:41 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2017-02/news/</guid>
      <description>&lt;p&gt;Немного новостей про Visual Studio Code, .NET, Go и прочее.&lt;/p&gt;

&lt;h3 id=&#34;vs-code-net&#34;&gt;VS Code + .NET&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#39;https://code.visualstudio.com/updates/v1_9&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Релиз VS Code 1.9&lt;/a&gt; &amp;mdash; много доработок, в т.ч. для TypeScript.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://blogs.msdn.microsoft.com/dotnet/2017/02/01/the-net-language-strategy/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;The .NET Language Strategy&lt;/a&gt; &amp;mdash; о стратегии развития C#, VB.NET, F#.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://github.com/dotnet/csharplang&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;The official repo for the design of the C# programming language&lt;/a&gt; &amp;mdash; теперь здесь.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;go&#34;&gt;Go&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#39;https://groups.google.com/forum/#!msg/golang-dev/G09HaWfMl6g/74v1cFGlAwAJ&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Go 1.8 / Go 1.9 Schedule Update&lt;/a&gt; &amp;mdash; выпуск 1.8 планируется на 14-16 февраля.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://blog.codeship.com/comparing-elixir-go/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Comparing Elixir and Go&lt;/a&gt; &amp;mdash; автор без фанатизма и достаточно качественно сравнивает оба языка (вкупе с инфраструктурой).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;прочее&#34;&gt;Прочее&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#39;https://nodejs.org/en/blog/release/v7.5.0/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Релиз Node.js 7.5&lt;/a&gt; (на всякий случай напомню, что не LTS).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;http://mithril.js.org/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Релиз Mithril 1.0&lt;/a&gt; &amp;mdash; кто не в курсе, это небольшой и шустрый фреймворк для SPA (самому не доводилось пробовать).&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Подборка статей по UX, дизайну, CSS</title>
      <link>https://yarfullstack.com/post/2017-01/ux-articles/</link>
      <pubDate>Fri, 27 Jan 2017 11:22:58 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2017-01/ux-articles/</guid>
      <description>&lt;p&gt;У меня накопилось много интересных ссылок, подробно описывать каждую утомительно.
Поэтому, я просто оставлю это здесь.&lt;/p&gt;

&lt;h3 id=&#34;фундаментальное&#34;&gt;Фундаментальное&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Основы и отличия персонализации и кастомизации: &lt;a href=&#39;https://www.nngroup.com/articles/customization-personalization/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Customization vs. Personalization in the User Experience&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;7 советов для успешной кастомизации: &lt;a href=&#39;https://www.nngroup.com/articles/customization/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;7 Tips for Successful Customization&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://habrahabr.ru/company/mailru/blog/307556/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Планирование юзабилити-тестирования. Часть 1&lt;/a&gt;, &lt;a href=&#39;https://habrahabr.ru/company/mailru/blog/308054/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Планирование юзабилити-тестирования. Часть 2&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;прикладное&#34;&gt;Прикладное&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Полезные советы по использованию иконок: &lt;a href=&#39;https://uxplanet.org/tips-for-using-icons-in-your-app-541a6728e7d4&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Tips for Using Icons in Your App&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Краткий обзор процессов и инструментов для прототипирования: &lt;a href=&#39;https://blog.prototypr.io/14-prototyping-tools-how-each-can-be-used-1c804fab33a6&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;16 Prototyping Tools &amp;amp; How Each Can Be Used&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;css-feature-queries&#34;&gt;CSS feature queries&lt;/h3&gt;

&lt;p&gt;А вы знаете, что в свежих браузерах можно определять, поддерживают ли они фичи CSS?
Встречайте CSS feature queries (@supports):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#39;http://tympanus.net/codrops/css_reference/supports/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;@supports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://bitsofco.de/the-one-css-feature/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;The One CSS Feature I Really Want&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://hacks.mozilla.org/2016/08/using-feature-queries-in-css/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Using Feature Queries in CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;оригинальное&#34;&gt;Оригинальное&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Где может быть удобен интерфейс командной строки: &lt;a href=&#39;http://boxesandarrows.com/heres-what-may-sound-like-a-crazy-idea/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Here’s What May Sound Like a Crazy Idea&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;http://www.heydonworks.com/article/on-writing-less-damn-code&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Writing Less Damn Code&lt;/a&gt; (перевод: &lt;a href=&#39;https://habrahabr.ru/post/308308/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Пишите меньше кода, блин&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>.NET Core и Visual Studio</title>
      <link>https://yarfullstack.com/post/2017-01/dotnet-core-and-visual-studio/</link>
      <pubDate>Thu, 19 Jan 2017 22:09:44 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2017-01/dotnet-core-and-visual-studio/</guid>
      <description>&lt;p&gt;Сегодня про опыт (мой и моих коллег) и впечатления о .NET Core.&lt;/p&gt;

&lt;p&gt;На всякий (почти невероятный) случай кратко о том, что это такое.
Microsoft сделал фреймворк для кросcплатформенной разработки. Построил его на немного других принципах &amp;mdash; сделал более
гранулированным (говоря попросту &amp;mdash; нарезали большие DLL-ки помельче), кое-что ещё поменяли.&lt;/p&gt;

&lt;p&gt;В итоге имеем возможность писать более быстрые (в том числе, потому что не тянем лишнего) и компактные кроссплатформенные приложения.
Проверяли под Windows и Linux &amp;mdash; вполне работает. Маководов не было рядом :)&lt;/p&gt;

&lt;p&gt;Есть и щедро разбросанные ложки дёгтя.  Основная проблема &amp;mdash; пока сыровато.
10 000 попугаев в секунду это, конечно, прикольно, но редко критично (по крайней мере, для бизнес-приложений).
Давайте по порядку.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;TL;DR&lt;/em&gt; В целом, новые проекты можно аккуратно пробовать делать на .NET Core, старые и большие я бы поостерёгся мигрировать.&lt;/p&gt;

&lt;h3 id=&#34;установка&#34;&gt;Установка&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; у меня Windows 10 + Visual Studio 2015, так что рассматриваю только этот случай и на данный момент времени.
Поэтому через месяц-другой лучше свериться с сайтом.&lt;/p&gt;

&lt;p&gt;Кстати, &lt;a href=&#39;https://www.microsoft.com/net/core&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;на сайте есть удобная и понятная инструкция о том, как начать работать&lt;/a&gt;.
Я всё по ней сделал и не встретил никаких проблем. Правда, не все следуют инструкции. А зря.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Скачайте и установите &lt;a href=&#39;https://go.microsoft.com/fwlink/?LinkId=691129&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Visual Studio 2015 Update 3&lt;/a&gt; если у вас установлена более старая VS 2015.
Нет, не так. &lt;strong&gt;ОБЯЗАТЕЛЬНО СНАЧАЛА УСТАНОВИТЕ&lt;/strong&gt;, чтобы потом не тратить время на последствия.&lt;/li&gt;
&lt;li&gt;Скачайте и установите &lt;a href=&#39;https://go.microsoft.com/fwlink/?LinkID=827546&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;.NET Core 1.0.1 tools Preview 2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Не лишним будет сразу скачать и установить &lt;a href=&#39;https://go.microsoft.com/fwlink/?LinkID=835014&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;.NET Core 1.1 SDK&lt;/a&gt;. Не факт, что потребуется, но вероятность хорошая.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;зрелость-экосистемы&#34;&gt;&amp;ldquo;Зрелость&amp;rdquo; экосистемы&lt;/h3&gt;

&lt;p&gt;Казалось бы, &amp;ldquo;это же .NET, что может случиться?&amp;rdquo; :)
Как вам отсутствие в нём отправки писем? Да, есть сторонний пакет &amp;mdash; &lt;a href=&#39;https://github.com/jstedfast/MailKit&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;MailKit&lt;/a&gt;.
Однако, думаю, ситуация понятна. Возникает ощущение экосистемы Node.js, но вместо выбора из десятка пакетов для почти каждой задачи &amp;mdash; один или ноль.
Я немного утрирую, конечно, что-то есть.&lt;/p&gt;

&lt;p&gt;Есть &lt;a href=&#39;https://docs.microsoft.com/en-us/dotnet/articles/standard/library&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;.NET Standard Library&lt;/a&gt; &amp;mdash; попытка специфицировать общее API для обычного .NET и Core.
Получится ли в итоге всё красиво и когда это будет, не берусь судить. Прорвёмся, я надеюсь.&lt;/p&gt;

&lt;p&gt;Пока нормально получается писать под .NET Standard 1.3 (1.4 отличается незначительно).
Но, временами, некоторые пакеты &amp;ldquo;хотят&amp;rdquo; 1.6 (не поддерживается обычным .NET).
Для микросервисной архитектуры не очень критично (достаточно дёшево сделать хоть два мелких проекта под разные версии), для монолитной может быть печальнее.&lt;/p&gt;

&lt;p&gt;В общем, ощущение, что очень уж хотелось сделать местами всё с нуля и круто и немного поторопились. Обратная совместимость? Ну, вы поняли.
И с project.json как-то неудобно получилось&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;мелкие-грабли-с-нашей-инфраструктурой&#34;&gt;Мелкие грабли с нашей инфраструктурой&lt;/h3&gt;

&lt;p&gt;Исторически сложилось, что мы используем TeamCity для билдов и NUnit для тестов.
Мне, лично, ещё нравится, когда тесты можно из ReSharper запускать.&lt;/p&gt;

&lt;p&gt;Если вкратце, из коробки просто так это всё не заработает. Про настройку билд-сервера рассказывать не буду, расскажу про настройку окружения для разработки.&lt;/p&gt;

&lt;p&gt;Чтобы запускать тесты на NUnit из командной строки (&lt;code&gt;dotnet test&lt;/code&gt;) или из студии, вам потребуется установить
&lt;a href=&#39;https://github.com/nunit/dotnet-test-nunit&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;dotnet-test-nunit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;В принципе, ничего сложного. Но если вы тоже работаете с TeamCity, не торопитесь набирать в Package Manager Console заветную строку:
&lt;div class=&#34;microlight&#34;&gt;Install-Package dotnet-test-nunit -Pre
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;На данный момент, интеграция с TeamCity будет вида &amp;ldquo;упал какой-то тест, курите логи&amp;rdquo;. В новой версии вроде должны починить.
Поэтому, устанавливаем немного модифицированный пакет:
&lt;div class=&#34;microlight&#34;&gt;Install-Package dotnet-test-nunit-teamcity -Pre
&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;резюме&#34;&gt;Резюме&lt;/h3&gt;

&lt;p&gt;Повторюсь. В целом, новые проекты можно аккуратно пробовать делать на .NET Core. Старые и большие проекты я бы поостерёгся мигрировать.&lt;/p&gt;

&lt;p&gt;И да, в микросервисной архитектуре будет немного проще сгладить некоторые &amp;ldquo;углы&amp;rdquo;.
А для тех, кто никуда не торопится, можно попробовать подождать, когда .NET Core будет поддерживать .NET Standard 2.0.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Наша логика и насколько на неё можно полагаться</title>
      <link>https://yarfullstack.com/post/2016-12/logic-and-cognitive-bias/</link>
      <pubDate>Fri, 16 Dec 2016 14:25:17 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-12/logic-and-cognitive-bias/</guid>
      <description>&lt;p&gt;Сейчас буду говорить не совсем про технологии, но тема интересная.&lt;/p&gt;

&lt;p&gt;Для разработки ПО тема логики и когнитивных искажений, думаю, особенно важная. Ведь разработчики обычно считают себя и свои рассуждения более логичными, чем у большинства других.
Всегда ли это так?&lt;/p&gt;

&lt;h3 id=&#34;тест-на-логику&#34;&gt;Тест на логику&lt;/h3&gt;

&lt;p&gt;Макс Высоких недавно прислал &lt;a href=&#39;http://www.hr-portal.ru/pages/hu/logika.php&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;отличный тест на логику&lt;/a&gt;. Юмор тамошний мне тоже понравился :)
Рекомендую пройти. Тем более &amp;mdash; пятница.&lt;/p&gt;

&lt;h2 id=&#34;две-крутые-книги&#34;&gt;Две крутые книги&lt;/h2&gt;

&lt;p&gt;Тем, у кого не получилось везде ответить правильно, будет крайне полезна книга Канемана &lt;a href=&#39;https://ru.wikipedia.org/wiki/%D0%94%D1%83%D0%BC%D0%B0%D0%B9_%D0%BC%D0%B5%D0%B4%D0%BB%D0%B5%D0%BD%D0%BD%D0%BE..._%D1%80%D0%B5%D1%88%D0%B0%D0%B9_%D0%B1%D1%8B%D1%81%D1%82%D1%80%D0%BE&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Думай медленно. Решай быстро&lt;/a&gt;
(там о том, как мы рассуждаем и принимаем решения, про когнитивные искажения и просто много интересного).&lt;/p&gt;

&lt;p&gt;Ещё стоит почитать Талеба &lt;a href=&#39;https://ru.wikipedia.org/wiki/%D0%A7%D1%91%D1%80%D0%BD%D1%8B%D0%B9_%D0%BB%D0%B5%D0%B1%D0%B5%D0%B4%D1%8C_%28%D1%82%D0%B5%D0%BE%D1%80%D0%B8%D1%8F%29&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Чёрный лебедь&lt;/a&gt;.
Там занимательно, хотя местами затянуто, описывается наше понимание теории вероятности (часто ошибочное).&lt;/p&gt;

&lt;p&gt;Канеман мне понравился больше, можно сказать, что его книга входит в мои TOP 10 прочитанных книг.
Но если Талеба не читали вообще &amp;mdash; стоит прочесть (я вот всё до его &amp;ldquo;Антихрупкости&amp;rdquo; никак не доберусь).&lt;/p&gt;

&lt;p&gt;Разумеется, можно не пройти тест прочитав эти книги, равно как прохождение теста не отменяет их полезность :)&lt;/p&gt;

&lt;h3 id=&#34;а-знаете-ли-вы&#34;&gt;А знаете ли вы?&lt;/h3&gt;

&lt;p&gt;Бонусный раздел :)&lt;/p&gt;

&lt;p&gt;Не так давно узнал, что памяти тоже не стоит особо доверять. Со временем память искажается (причём, в том числе, без нашего ведома).
В частности, какую-то последовательность событий (даже необязательно давнюю) вы можете помнить немного по-другому. Не говоря уже про зрительные образы.&lt;/p&gt;

&lt;p&gt;Подробнее в &lt;a href=&#39;http://www.ted.com/talks/elizabeth_loftus_the_fiction_of_memory&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;выступлении Elizabeth Loftus на TED&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Про руководства по стилю (style guides)</title>
      <link>https://yarfullstack.com/post/2016-12/style-guides/</link>
      <pubDate>Fri, 09 Dec 2016 14:07:59 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-12/style-guides/</guid>
      <description>&lt;p&gt;Хочу поделиться подборкой статей про руководства по стилю (или как говорят наши зарубежные коллеги, style guides).&lt;/p&gt;

&lt;p&gt;На случай, если вы сталкиваетесь с этим понятием впервые, подобные руководства упрощают жизнь дизайнеров, верстальщиков, разработчиков и тестировщиков.
А для крупных компаний, которые каждый год по несколько дизайнеров нанимают, я бы сказал &amp;mdash; значительно упрощают жизнь.&lt;/p&gt;

&lt;p&gt;Что ж, начну с отечественных наработок.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;контур-гайды&#34;&gt;Контур.Гайды&lt;/h3&gt;

&lt;p&gt;Недавно Алексей Рякин прислал мне ссылку &lt;a href=&#39;https://guides.kontur.ru/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Контур.Гайды&lt;/a&gt;.
До конца пока не прочитал, но в целом, впечатление положительное. Тем, кому намного проще читать подобные материалы на русском &amp;mdash; рекомендую.&lt;/p&gt;

&lt;h3 id=&#34;material-design&#34;&gt;Material Design&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#39;https://material.google.com/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Material Design&lt;/a&gt; &amp;mdash; если мне не изменяет память, это первое опубликованное и детально проработанное руководство.
Да, в Google не все и не всегда ему следуют, с &amp;ldquo;иконкой-гамбургером&amp;rdquo; и &amp;ldquo;троеточием&amp;rdquo; у них вообще беда в их же приложениях&amp;hellip; Но само руководство крутое.&lt;/p&gt;

&lt;h3 id=&#34;styleguides-io&#34;&gt;StyleGuides.io&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#39;http://styleguides.io/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;StyleGuides.io&lt;/a&gt; &amp;mdash; наиболее полное и удобное, из мне известных, собрание материалов по style guides.
Там есть и статьи, и примеры (тех же руководств от разных компаний там десятки). Если вам интересна эта тема, то StyleGuides.io, безусловно, отличная отправная точка.
Причём, как с точки зрения первого ознакомления с темой, так и с развитием в этом направлении.&lt;/p&gt;

&lt;h3 id=&#34;разное&#34;&gt;Разное&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#39;https://www.nngroup.com/articles/front-end-style-guides/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Front-End Style-Guides: Definition, Requirements, Component Checklist&lt;/a&gt; от
Nielsen Norman Group &amp;mdash; довольно неплохая статья небольшого объёма, которая объясняет что это и зачем, а также дарит короткий чеклист.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://airbnb.design/the-way-we-build/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;The Way We Build (How rethinking the Airbnb app changed the way we approach design)&lt;/a&gt; &amp;mdash; просто интересно почитать.&lt;/p&gt;

&lt;h3 id=&#34;странное&#34;&gt;Странное&lt;/h3&gt;

&lt;p&gt;Даже не знаю как характеризовать вот эту статью &lt;a href=&#39;https://vc.ru/p/accordion-and-tab-design&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Юзабилити веб-форм: Почему вкладки и «гармошки» вызывают проблемы у пользователей&lt;/a&gt;,
ссылку на которую мне прислал Женя Кирьянов.&lt;/p&gt;

&lt;p&gt;С одной стороны, наверное что-то полезное в ней есть.
Но, с учётом того, что картинки там не подгружаются, а простой способ сообщить администрации ресурса о проблеме отсутствует (комментарии уже недоступны)&amp;hellip;
Скорее, эта статья на данный хороший пример того, как не надо публиковать статьи :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Интересное в ноябре</title>
      <link>https://yarfullstack.com/post/2016-12/interesting/</link>
      <pubDate>Thu, 01 Dec 2016 22:05:35 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-12/interesting/</guid>
      <description>&lt;p&gt;Немного странное название для декабрьской статьи, однако, ссылки я собирал давно :)
Сегодня ссылки и краткое описание следующих статей:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.NET Portability Analyzer&lt;/li&gt;
&lt;li&gt;Как дизайнить слова&lt;/li&gt;
&lt;li&gt;AWS Snowmobile&lt;/li&gt;
&lt;li&gt;TANK &amp;mdash; быстрый распределённый лог&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;net-portability-analyzer&#34;&gt;.NET Portability Analyzer&lt;/h3&gt;

&lt;p&gt;Вчера прочитал на Хабре про &lt;a href=&#39;https://habrahabr.ru/post/312506/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;.NET Portability Analyzer&lt;/a&gt;.
Лично мне она пока не сильно пригодиться, а вот коллегам, которые переводят один из наших продуктов под Linux &amp;mdash; имеет смысл посмотреть.&lt;/p&gt;

&lt;h3 id=&#34;как-дизайнить-слова&#34;&gt;Как дизайнить слова&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#39;https://medium.com/@jsaito/how-to-design-words-63d6965051e9&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;How to design words&lt;/a&gt; &amp;mdash; очень полезная статья!
Советы, вроде бы, несложные, некоторые &amp;mdash; даже очевидные&amp;hellip;&lt;/p&gt;

&lt;p&gt;Но поймал себя на том, что надо через пару месяцев ещё раз перечитать. А потом подумать, как сделать некоторые наши продукты ещё лучше.&lt;/p&gt;

&lt;h3 id=&#34;aws-snowmobile&#34;&gt;AWS Snowmobile&lt;/h3&gt;

&lt;p&gt;Помните старую задачу, как быстрее организовать передачу большого объёма данных (с ответом &amp;mdash; грузовик с дисками)?
Amazon &lt;a href=&#39;https://aws.amazon.com/ru/snowmobile/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;решает её аналогичным образом&lt;/a&gt; (и это не шутка).&lt;/p&gt;

&lt;h3 id=&#34;tank-быстрый-распределённый-лог&#34;&gt;TANK &amp;mdash; быстрый распределённый лог&lt;/h3&gt;

&lt;p&gt;Не пробовал, да и подходящих задач пока нет. Но чем-то меня зацепило &lt;a href=&#39;https://github.com/phaistos-networks/TANK&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;описание этого проекта на GitHub&lt;/a&gt;.
Говорят, что в пару раз быстрее Кафки на одном источнике и в 10 раз на трёх.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Отладка и тестирование вёрстки</title>
      <link>https://yarfullstack.com/post/2016-11/css-debug-and-testing/</link>
      <pubDate>Fri, 25 Nov 2016 12:59:32 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-11/css-debug-and-testing/</guid>
      <description>&lt;p&gt;Сегодня небольшая подборка информации для тех, кому интересна тема тестирования и отладки вёрстки.
Disclaimer: некоторые статьи читал давно (возможно что-то устарело), не всеми советами пользовался, однако статьи, безусловно, полезные.
&lt;/p&gt;

&lt;h3 id=&#34;chrome-dev-tools&#34;&gt;Chrome Dev Tools&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#39;https://hackernoon.com/twelve-fancy-chrome-devtools-tips-dc1e39d10d9d&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Twelve Fancy Chrome DevTools Tips&lt;/a&gt;.
Понятно, что статья не всеобъемлющая, но некоторые советы очень даже полезные.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://habrahabr.ru/post/254007/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;15 советов и хитростей инструментов разработчика Chrome, которые вы обязаны знать&lt;/a&gt;.
Другой набор советов.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://habrahabr.ru/post/253359/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Справочник методов console в JS&lt;/a&gt;.
Статья 2015 года, некоторых новшеств там нет, но она очень удобно структурирована и рассматриваются все основные браузеры (а также Node.js).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;http://bgrins.github.io/devtools-snippets/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;DevTools Snippets&lt;/a&gt;. Коллекция сниппетов (Source / Snippets в Chrome Dev Tools).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Отдельный совет касается галочки Async в Sources / Call stack.
Её включение позволяет увидеть полный стек вызовов (например, перейти из обработчика setTimeout/setInterval к коду, который его установил).
Анализируя стек вызовов, можно посмотреть значения переменных в любой точке выполнения.&lt;/p&gt;

&lt;h3 id=&#34;отладка-css&#34;&gt;Отладка CSS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#39;https://benfrain.com/debugging-css/%20&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Debugging CSS&lt;/a&gt; &amp;mdash; отличная статья, особенно для таких как я &amp;mdash;
кто занимается проблемами с вёрсткой далеко не каждый день. Можно последовательно читать, когда сам сходу не разобрался &amp;mdash; есть вероятность,
что найдёшь что-то подходящее.&lt;/p&gt;

&lt;h3 id=&#34;автоматизация-теситрования&#34;&gt;Автоматизация теситрования&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#39;https://www.smashingmagazine.com/2016/06/the-art-of-layout-testing-with-galen-framework/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;The Art Of Layout Testing With Galen Framework&lt;/a&gt; &amp;mdash; интересный фреймворк.
Пока не было случая попробовать, но по описанию очень понравилось. Если кто-то уже пробовал &amp;mdash; &lt;strong&gt;поделитесь отзывами, пожалуйста.&lt;/strong&gt;
Можно в &lt;a href=&#39;https://twitter.com/yarfs/status/802096880490610688&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;https://github.com/mapbox/pixelmatch&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Pixelmatch. The smallest, simplest and fastest JavaScript pixel-level image comparison library&lt;/a&gt;.
Из названия, думаю, всё понятно, где можно применить &amp;mdash; тоже :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MSSQL 2016 SP1 - теперь enterprise-фичи и в стандартных редакциях!</title>
      <link>https://yarfullstack.com/post/2016-11/sql-2016-sp1-enterprise-features/</link>
      <pubDate>Thu, 17 Nov 2016 13:10:32 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-11/sql-2016-sp1-enterprise-features/</guid>
      <description>&lt;p&gt;Давно меня так не радовал Microsoft. И я не про новую студию и прочие плюшечки, и даже не про &lt;a href=&#39;https://www.microsoft.com/en-us/sql-server/sql-server-vnext-including-Linux&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;MSSQL on Linux&lt;/a&gt; , а про
&lt;a href=&#39;https://blogs.msdn.microsoft.com/sqlreleaseservices/sql-server-2016-service-pack-1-sp1-released/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;выход Microsoft SQL Server 2016 SP1&lt;/a&gt;.
Они просто взяли и включили большинство enterprise-фич во &lt;strong&gt;все&lt;/strong&gt; редакции MSSQL! Можете просто прочитать статью по ссылке,
ниже табличка с фичами и ещё несколько слов о паре других интересных нововведений.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://msdnshared.blob.core.windows.net/media/2016/11/111616_0403_SQLServer201.png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;прочие-нововведения&#34;&gt;Прочие нововведения&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;CREATE OR ALTER &amp;mdash; давно пора! Думаю все поняли о чём речь :)&lt;/li&gt;
&lt;li&gt;DBCC CLONEDATABASE &amp;mdash; копирование схемы БД (без данных). Не подразумевается использование клонов в продакшн.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Два простых способа сделать пользователей счастливее</title>
      <link>https://yarfullstack.com/post/2016-11/two-simple-tips-to-make-users-happier/</link>
      <pubDate>Sun, 13 Nov 2016 18:32:37 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-11/two-simple-tips-to-make-users-happier/</guid>
      <description>&lt;p&gt;Сегодня расскажу про два сравнительно простых способа как сделать ваших пользователей ещё счастливее.&lt;/p&gt;

&lt;p&gt;Как вы уже знаете, мне нравятся быстрые сайты. Летом я уже делился &lt;a href=&#34;https://yarfullstack.com/post/2016-07/site-optimization-tools/&#34;&gt;набором инструментов для оптимизации сайтов&lt;/a&gt;.
Однако, есть пара несложных приёмов, первый из которых эти инструменты вряд ли когда-нибудь догадаются посоветовать.&lt;/p&gt;

&lt;p&gt;Начнём с самого простого в &lt;em&gt;реализации&lt;/em&gt; способа.
Его &lt;em&gt;внедрение,&lt;/em&gt; правда, может отнять у вас много времени на этапе согласования в компании или с участниками вашей команды.
&lt;/p&gt;

&lt;h3 id=&#34;быстрая-загрузка-шрифтов&#34;&gt;Быстрая загрузка шрифтов&lt;/h3&gt;

&lt;p&gt;Безусловно, вам может пригодиться статья &lt;a href=&#39;https://www.filamentgroup.com/lab/font-events.html&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;How We Load Web Fonts Progressively&lt;/a&gt;.
Или, более фундаментальная &lt;a href=&#39;https://www.zachleat.com/web/comprehensive-webfonts/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;A Comprehensive Guide to Font Loading Strategies&lt;/a&gt;.
Но подождите тратить 15-30 минут вашего времени на увлекательное чтение! Я успел? :)&lt;/p&gt;

&lt;p&gt;Давайте подумаем, в чём может быть цель загрузки шрифта?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;В вашей компании есть корпоративный стиль, брендбук, строгие рекомендации и использование особенных шрифтов. Тогда читайте статьи выше и переходите к следующему разделу.&lt;/li&gt;
&lt;li&gt;Вам сказали &amp;ldquo;этот шрифт такой клёвый, лишние 100КБ никто не заметит&amp;hellip;&amp;rdquo;. Здесь ещё есть варианты на что-то повлиять. Читайте дальше.&lt;/li&gt;
&lt;li&gt;Вы выбираете какой шрифт использовать и у вас нет ярко выраженной антипатии к системным шрифтам (Segoe UI, Roboto,..). Тогда этот способ точно для вас.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Способ простой до невозможности. Что может быть быстрее загрузки шрифта, который не надо загружать? :)
Я увидел этот способ в статье &lt;a href=&#39;https://www.smashingmagazine.com/2015/11/using-system-ui-fonts-practical-guide/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Using System UI Fonts In Web Design: A Quick Practical Guide&lt;/a&gt;
как раз, когда я занимался CSS для YarFullStack. И он мне, конечно же, понравился. Справедливости ради стоит отметить, что Medium уже
не использует этот подход. Так что решайте сами.&lt;/p&gt;

&lt;p&gt;Как выглядит определение шрифтов для YarFullStack? Да очень просто:&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;font-family: -apple-system, BlinkMacSystemFont, &#34;Segoe UI&#34;, &#34;Roboto&#34;, &#34;Oxygen&#34;,
&#34;Ubuntu&#34;, &#34;Cantarell&#34;, &#34;Fira Sans&#34;, &#34;Droid Sans&#34;, &#34;Helvetica Neue&#34;, sans-serif;
&lt;/div&gt;

&lt;p&gt;Как это работает? Тоже просто. Если вы работаете на Mac OS X или iOS &amp;mdash; у вас сработает один из первых двух вариантов. Для Windows [Phone] &amp;mdash; третий и т.д.
Естественно, если вы умудрились установить всевозможные шрифты на Android &amp;mdash; тогда шрифт будет не совсем &amp;ldquo;родной&amp;rdquo;, но тоже симпатичный.&lt;/p&gt;

&lt;p&gt;Плюсы понятные &amp;mdash; грузится быстро, никаких &amp;ldquo;морганий&amp;rdquo;, никакого чтения статей на тему &amp;ldquo;а вот сейчас-то мы совсем хорошо загрузим шрифт&amp;rdquo;.
Ещё немаловажный плюс &amp;mdash; пользователь читает текст на сайте, набранный тем же шрифтом, что и остальной интерфейс.
Думаю, это должно быть приятно большинству ваших пользователей. Да, вы можете тащиться от Open Sans или Noto, однако у людей разные вкусы и это прекрасно.&lt;/p&gt;

&lt;p&gt;Какие минусы?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Брэнд &amp;mdash; если для вас &lt;strong&gt;действительно&lt;/strong&gt; критичен какой-то особенный шрифт &amp;mdash; большого выбора у вас нет.&lt;/li&gt;
&lt;li&gt;В разных системах сайт будет выглядеть немного по-разному. Однако, если вы не фанат попиксельного выравнивания табличек&amp;hellip; Да и, будем честными, чаще всего в разных системах сайт и без этого будет выглядеть немного по-разному.&lt;/li&gt;
&lt;li&gt;Вероятно, в будущем вам может захотеться добавить шрифты в список. Правда, лично я это и минусом не считаю
&amp;mdash; с учётом частоты смены системных шрифтов и критичности этой задачи.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;загрузка-картинок-в-зависимости-от-разрешения-с-помощью-srcset&#34;&gt;Загрузка картинок в зависимости от разрешения с помощью srcset&lt;/h3&gt;

&lt;p&gt;Если вкратце, этот способ позволяет не грузить на маленькие смартфончики ваши картинища, оптимизированные для Retina :)&lt;/p&gt;

&lt;p&gt;Когда я писал статью &lt;a href=&#34;https://yarfullstack.com/post/2016-10/tables-and-charts-ux/&#34;&gt;Удобное представление таблиц и диаграмм&lt;/a&gt;, понадобилось добавить довольно большие анимированные гифки.
Когда я подумал про тех, кто может читать эту статью с телефона и не на самом удачном тарифе или соединении&amp;hellip;&lt;/p&gt;

&lt;p&gt;В общем, я слышал раньше про srcset, но как-то не доводилось применять &amp;mdash; картинки обычно использовал довольно мелкие, а тут, суммарно, 3МБ&amp;hellip;
Почитал пару статей: &lt;a href=&#39;https://bitsofco.de/the-srcset-and-sizes-attributes/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Responsive Images - The srcset and sizes Attributes&lt;/a&gt;
и &lt;a href=&#39;https://css-tricks.com/responsive-images-youre-just-changing-resolutions-use-srcset/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Responsive Images: If you’re just changing resolutions, use srcset&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Сделал:
&lt;div class=&#34;microlight&#34;&gt;
&amp;lt;img src=&#34;https://yarfullstack.com/img/clear-off-the-table-small.gif&#34; alt=&#34;clear-off-the-table.gif&#34; 
    style=&#34;overflow-x:hidden&#34; 
    srcset=&#34;https://yarfullstack.com/img/clear-off-the-table.gif 800w, https://yarfullstack.com/img/clear-off-the-table-small.gif 400w&#34;
    sizes=&#34;(min-width: 1280px) 800px,
    (max-width: 1280px) and (min-width: 1024px) 600px,
    (max-width: 1024px) and (min-width: 800px) 520px, 
    (max-width:800px) 90vw, 90vw&#34;&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Принцип работы такой: вы указываете отдельно набор картинок с шириной и на каких разрешениях какая ширина предпочтительнее.
Браузер учитывает ваши пожелания (но может их немного оптимизировать, на своё усмотрение). В простых случаях sizes можно не указывать.
Мне пригодилось, потому что на малых разрешениях дефолтные 100vw выглядели не очень хорошо.&lt;/p&gt;

&lt;p&gt;В упрощённом варианте без sizes выглядит так:
&lt;div class=&#34;microlight&#34;&gt;&amp;lt;img src=&#34;one.png&#34;  
srcset=&#34;two.png 2x, three.png 3x, four.png 4x&#34;&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;По большому счёту, результатом я доволен. В IE не работает, но полифил прикручивать не стал из-за потенциальных проблем.
Открытой остаётся более сложная тема &amp;mdash; как, помимо ширины окна, определить, действительно ли нужна маленькая картинка.&lt;/p&gt;

&lt;p&gt;Да, чуть не забыл, вроде в HTML 5.1 для &amp;lt;picture&amp;gt; тоже будет нормально работать srscset. Just FYI.&lt;/p&gt;

&lt;h3 id=&#34;резюме&#34;&gt;Резюме&lt;/h3&gt;

&lt;p&gt;Подумайте, что ещё вы можете сделать для ваших пользователей. Может, есть что-то, что не особо нужно никому кроме вас самих,
а без этого сайт станет немного легче и удобнее?&lt;/p&gt;

&lt;p&gt;Например, я лично стараюсь держать себя в руках и, несмотря на многочисленные рекомендации, не добавлять КПДВ к статьям :)&lt;/p&gt;

&lt;p&gt;Ещё в планах выбрать другой вариант обратной связи и отстрелить этот тормозной Disqus&amp;hellip;
Есть идеи? Может в соцсетях обсуждать? Пишите комментарии в &lt;del&gt;этот тормозной&lt;/del&gt; Disqus или в &lt;a href=&#39;https://twitter.com/yarfs/status/797845954800078848&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Интересное в октябре</title>
      <link>https://yarfullstack.com/post/2016-10/interesting/</link>
      <pubDate>Fri, 28 Oct 2016 09:56:03 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-10/interesting/</guid>
      <description>&lt;p&gt;Сегодня &lt;del&gt;бессвязная&lt;/del&gt; подборка слабо связанных между собой новостей и заметок, которые мне показались мне интересными.
Про повторное использование кода, Next.js и Yarn.&lt;/p&gt;

&lt;h3 id=&#34;о-мифическом-повторном-использовании-кода&#34;&gt;О мифическом повторном использовании кода&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#39;https://plus.google.com/&amp;#43;SergeyTeplyakov/posts/D6EnwcjUaW4&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Заметка Сергея Теплякова&lt;/a&gt; понравилась.
В принципе, мы с ним сходимся на том, что увлекаться &amp;ldquo;высокими материями&amp;rdquo; при проектировании далеко не всегда полезно :)
&lt;/p&gt;

&lt;h3 id=&#34;next-js&#34;&gt;Next.js&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#39;https://zeit.co/blog/next&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Интересный фреймворк от интересных людей.&lt;/a&gt;
Отзывов написать не могу, пока ещё не пробовал. Однако, описание интересное.
Предвосхищая ваши вопросы вида &amp;ldquo;ещё один шаблон для старта?&amp;rdquo;, &lt;a href=&#39;https://github.com/zeit/next.js&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;рекомендую посмотреть в FAQ&lt;/a&gt; раздел &amp;ldquo;Is this like create-react-app?&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;yarn&#34;&gt;Yarn&lt;/h3&gt;

&lt;p&gt;Более быстрая и (вроде бы) удобная альтернатива npm. Кто-то пищит от радости, кто-то настроен скептически&amp;hellip;
Я пока остался на npm, но, вероятно, немного позже попробую yarn. А пока набор ссылок по теме:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#39;https://yarnpkg.com/en/docs/usage&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Документация о том, как использовать&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;http://yehudakatz.com/2016/10/11/im-excited-to-work-on-yarn-the-new-js-package-manager-2/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Мнение Yehuda Katz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://shift.infinite.red/npm-vs-yarn-cheat-sheet-8755b092e5cc&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Сравнение&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://www.sitepoint.com/yarn-vs-npm/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Ещё одно сравнение&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Удобное представление таблиц и диаграмм</title>
      <link>https://yarfullstack.com/post/2016-10/tables-and-charts-ux/</link>
      <pubDate>Thu, 20 Oct 2016 21:46:43 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-10/tables-and-charts-ux/</guid>
      <description>&lt;p&gt;Прошлые две недели прошли для меня под знаком статьи &lt;a href=&#39;http://blog.darkhorseanalytics.com/clear-off-the-table&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Clear off the table&lt;/a&gt;.
Сначала увидел ссылку в комментарии к другой статье на хабре, потом ещё пара человек мне ссылку на перевод прислали.&lt;/p&gt;

&lt;p&gt;Что характерно, поскольку сама статья и анимация достаточно грамотная, у многих возникает ощущение &amp;ldquo;круто! давайте &lt;strong&gt;всё&lt;/strong&gt; так сделаем&amp;rdquo;.
Не надо так :)&lt;/p&gt;

&lt;p&gt;Собственно, о чём речь? Речь о том, что в идеале, пользователь должен быть избавлен от лишней информации и &amp;ldquo;визуального шума&amp;rdquo;.
С этим я согласен более чем абсолютно. Только всё хорошо в меру. Что предлагают авторы?&lt;/p&gt;

&lt;p&gt;Давайте посмотрим.

&lt;img src=&#34;https://yarfullstack.com/img/clear-off-the-table-small.gif&#34; alt=&#34;clear-off-the-table.gif&#34; style=&#34;overflow-x:hidden&#34; 
    srcset=&#34;https://yarfullstack.com/img/clear-off-the-table.gif 800w, https://yarfullstack.com/img/clear-off-the-table-small.gif 400w&#34;
    sizes=&#34;(min-width: 1280px) 800px, (max-width: 1280px) and (min-width: 1024px) 600px, (max-width: 1024px) and (min-width: 800px) 520px, (max-width:800px) 90vw, 90vw&#34;&gt;&lt;/p&gt;

&lt;p&gt;Когда я смотрел в первый раз, думал &amp;mdash; а потом они скажут &amp;ldquo;здесь вообще таблица не нужна, давайте текстом напишем самое важное&amp;rdquo; :)&lt;/p&gt;

&lt;p&gt;Где отлично сработает такой подход? Для презентаций, докладов и прочих материалов, где вы &lt;strong&gt;знаете&lt;/strong&gt; набор данных.
То есть, когда он статичен или почти статичен.&lt;/p&gt;

&lt;p&gt;Что делать на динамическом наборе данных? Правильный ответ, на мой взгляд &amp;mdash; необходимо принимать достаточно хорошее решение для каждого конкретного случая.
И сделать более-менее приемлемый универсальный вариант (не всегда реально проработать каждый конкретный случай, если задуматься о бюджете).&lt;/p&gt;

&lt;p&gt;Что однозначно работает всегда? Выравнивание. Правильно выровненные данные, на моей памяти, ещё никому не вредили.&lt;/p&gt;

&lt;p&gt;Что работает реже? Подбор точности для чисел и выбор ширины столбцов. Но стараться, безусловно, стоит. То же самое относится к группировке строк.&lt;/p&gt;

&lt;p&gt;Что касается &amp;ldquo;зебры&amp;rdquo; и линий &amp;mdash; иногда что-то из этого придётся оставить, особенно когда много столбцов и строк (и не всегда работает вариант &amp;ldquo;не делайте много столбцов и строк&amp;rdquo;).&lt;/p&gt;

&lt;h3 id=&#34;про-диаграммы-и-графики&#34;&gt;Про диаграммы и графики&lt;/h3&gt;

&lt;p&gt;В том же блоге есть не менее впечатляющая статья &lt;a href=&#39;http://blog.darkhorseanalytics.com/data-looks-better-naked&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Data Looks Better Naked&lt;/a&gt;.
Всё сказанное выше применимо и к этой статье (быть может, в чуть меньшей степени).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://yarfullstack.com/img/data-ink-small.gif&#34; alt=&#34;data-ink.gif&#34; style=&#34;margin-left:-1em;padding:0;&#34; 
    srcset=&#34;https://yarfullstack.com/img/data-ink.gif 640w, https://yarfullstack.com/img/data-ink-small.gif 320w&#34;
    sizes=&#34;(min-width: 1024px) 640px, (max-width: 1024px) and (min-width: 800px) 520px, (max-width:800px) 90vw, 90vw&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;мои-личные-рекомендации&#34;&gt;Мои личные рекомендации&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Думайте :)&lt;/li&gt;
&lt;li&gt;Если интересно глубокое погружение в тему &amp;mdash; почитайте Тафти. Потом мне расскажете :)&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Первые впечатления о gRPC</title>
      <link>https://yarfullstack.com/post/2016-10/gRPC-first-impressions/</link>
      <pubDate>Thu, 13 Oct 2016 21:46:12 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-10/gRPC-first-impressions/</guid>
      <description>&lt;p&gt;Помните, я &lt;a href=&#34;https://yarfullstack.com/post/2016-09/grpc-first-steps/&#34;&gt;обещал поделиться впечатлениями о gRPC&lt;/a&gt;, когда доведётся попробовать в деле?
Довелось. Сейчас поделюсь. Только уточню, что пока это впечатления с хакатона, там не будет махрового энтерпрайза, повального контроля с аудитом и тому подобного.&lt;/p&gt;

&lt;p&gt;В вопросу о хакатоне. Делал небольшую инфраструктуру для того, чтобы сделать немного счастливее наших тестировщиков.
И разработчиков, конечно, но в исторической перспективе.&lt;/p&gt;

&lt;h3 id=&#34;техническая-концепция&#34;&gt;Техническая концепция&lt;/h3&gt;

&lt;p&gt;Концепция была простая &amp;mdash; плагины к браузерам для упрощения заведения багов и набор сервисов (строго говоря &amp;mdash; пока это консольные приложения).
Цели &amp;mdash; быстро сделать прототип, получив при этом удовольствие от исследования сравнительно новых для меня технологий.
Исходя из целей, отметены были всякие консулы, grpc-gateway (для REST) &amp;mdash; в основном, всё реализовывалось &amp;ldquo;в лоб&amp;rdquo;. В тот же лес ушла &amp;ldquo;безопасность&amp;rdquo;.
Сервисы получились такие:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Central&lt;/strong&gt; &amp;mdash; серверное приложение на Go. Основная ответственность &amp;mdash; реестр подключённых сервисов (агентов). Или как модно говорить &amp;mdash; service discovery.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bot&lt;/strong&gt; &amp;mdash; серверное приложение на Go. Принимает сообщения из Rocket.Chat и может отвечать на них или отправлять новые.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Session&lt;/strong&gt; &amp;mdash; приложение на Go. Запускается на компьютере тестировщика. Помогает плагину получать дополнительную информацию (например, из Redmine) и перенаправлять команды другим агентам.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Redmine&lt;/strong&gt; &amp;mdash; серверное приложение на .NET. Предоставляет необходимые данные из Redmine (например, список проектов).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Archiver&lt;/strong&gt; &amp;mdash; приложение на .NET. Запускается на сервере БД. Умеет делать бэкапы. Юзает наш замечательный &lt;a href=&#39;http://sparesync.com/downloads.htm&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;PackDb&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deployer&lt;/strong&gt; &amp;mdash; приложение на .NET. Запускается на компьютере разработчика. Умеет восстанавливать бэкапы (без PackDb тоже не обошлось).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;что-было-использовано&#34;&gt;Что было использовано&lt;/h3&gt;

&lt;p&gt;Как видите, у меня был небольшой зоопарк из плагина к Chrome (сейчас в процессе плагин к IE), три приложения на Go и три на .NET.
Всем им, естественно, хотелось между собой общаться (ладно, не всем, но я заставил почти всех :)&lt;/p&gt;

&lt;p&gt;В такой ситуации gRPC показал себя крайне положительно, за исключением того, что в браузере он пока из коробки не работает.
С другой стороны, написать на Go простенький HTTP API Server&amp;hellip; Даже для такого ненастоящего гофера как я &amp;mdash; дело 5 минут.
По большому счёту, это потребовалось только для &amp;ldquo;session&amp;rdquo; (чтобы плагин мог получать и записывать необходимые данные) и для &amp;ldquo;bot&amp;rdquo;
(Rocket.Chat пока тоже не умеет gRPC).&lt;/p&gt;

&lt;h3 id=&#34;что-понравилось&#34;&gt;Что понравилось&lt;/h3&gt;

&lt;p&gt;Описание сервисов в proto-файлах. Действительно, описание &amp;ldquo;как бы контракта&amp;rdquo; в отдельном файле мотивирует думать над API, пока его пишешь
(хотя protobuf v3 сравнительно толерантен к изменению API). Нравится, что есть в явном виде &amp;ldquo;сообщение&amp;rdquo;, а не набор параметров. Маленький пример:
&lt;div class=&#34;microlight&#34;&gt;service CentralService {
// Registers specified Agent.
rpc Register(Agent) returns (RegisterResponse) {}
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Есть поддержка перечислений:
&lt;div class=&#34;microlight&#34;&gt;enum AgentType {
    ...
    // Redmine watching (singleton)
    Redmine		=	4;
    ...
}
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Понравилось что относительно быстро генерируются прокси (что на Go, что на .NET). Прокси достаточно удобно использовать.
Так выглядит сигнатура описанного выше метода на Go:
&lt;div class=&#34;microlight&#34;&gt;func (s *centralServer) Register(ctx context.Context, agent *a.Agent) 
    (*a.RegisterResponse, error) { ...
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;А так вызов этого метода на .NET:
&lt;div class=&#34;microlight&#34;&gt;var channel = new Channel(
    Environment.GetEnvironmentVariable(&#34;MULTIDASH&#34;), ChannelCredentials.Insecure);
var central = new CentralService.CentralServiceClient(channel);
...
central.Register(new Agent
{
    Type = AgentType.Redmine,
    Host = Environment.MachineName,
    Port = port,
    ...
});
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;И ещё (это субъективно, конечно) &amp;mdash; эстетическое удовольствие от названия командного файла generate_&lt;strong&gt;protos&lt;/strong&gt;.bat :)
С ним, пожалуй, сравнится разве что использование хранилища &amp;ldquo;bolt&amp;rdquo; для &amp;ldquo;session&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;что-не-понравилось&#34;&gt;Что не понравилось&lt;/h3&gt;

&lt;p&gt;Не понравилось то, что падает в runtime, когда передаёшь null в поле сообщения. Столкнулся с этим, когда передавал строки на C#
(в Go строки и так по умолчанию &amp;ldquo;&amp;rdquo; &amp;mdash; там такой проблемы нет). Лечится, конечно, инциализацией в пустую строку. Но осадок остался.&lt;/p&gt;

&lt;p&gt;Не столкнулся, но заочно не нравится &lt;a href=&#39;http://www.grpc.io/docs/guides/auth.html&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;скудный набор вариантов аутентификации из коробки&lt;/a&gt; (либо SSL/TLS, либо гугловый OAuth2).
Понятно, что можно реализовать свой (возможно сейчас уже плодятся проекты на GitHub, которые это делают), но хотелось бы что-то &lt;del&gt;тёплое, ламповое&lt;/del&gt; коробочное&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;резюме&#34;&gt;Резюме&lt;/h3&gt;

&lt;p&gt;В целом скорее понравилось, чем не понравилось. При случае, буду пробовать дальше.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Руководство по использованию иконок</title>
      <link>https://yarfullstack.com/post/2016-10/ux-icons/</link>
      <pubDate>Thu, 13 Oct 2016 21:30:39 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-10/ux-icons/</guid>
      <description>&lt;p&gt;Недавно прочитал статью &lt;a href=&#39;https://uxplanet.org/tips-for-using-icons-in-your-app-541a6728e7d4&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Tips for Using Icons in Your App&lt;/a&gt;.
Понравилась. Вроде всё по делу. Делюсь кратким содержанием. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Чтобы иконки были полезными, их назначение должно быть понятно пользователю. Рекомендуется правило 5 секунд (если дольше думаешь над тем, что она значит =&amp;gt; не подходит).&lt;/li&gt;
&lt;li&gt;Иконки должны быть простыми и схематичными, чтобы пользователю легче было к ним привыкнуть.&lt;/li&gt;
&lt;li&gt;Хорошо бы иконке заиметь постоянно видимое текстовое пояснение. Подтверждено многократными экспериментами.&lt;/li&gt;
&lt;li&gt;На иконки должно быть удобно нажимать (должны быть достаточно большими и с хорошими отступами).&lt;/li&gt;
&lt;li&gt;Если есть иконки для платформы, не надо придумывать свои.&lt;/li&gt;
&lt;li&gt;Тестируйте иконки! Тестировать стоит как понятность, так и запоминаемость.&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Хорошие статьи про дизайн кнопок</title>
      <link>https://yarfullstack.com/post/2016-09/ux-buttons/</link>
      <pubDate>Fri, 23 Sep 2016 14:28:45 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-09/ux-buttons/</guid>
      <description>&lt;p&gt;Хочу поделиться подборкой хороших статей про особенности дизайна кнопок.&lt;/p&gt;

&lt;h3 id=&#34;best-practices-types-and-states&#34;&gt;Best Practices, Types and States&lt;/h3&gt;

&lt;p&gt;В статье &lt;a href=&#39;https://uxplanet.org/button-ux-design-best-practices-types-and-states-647cf4ae0fc6&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Button UX Design: Best Practices, Types and States&lt;/a&gt;
есть как всем известные рекомендации, так и не очень. Для меня было интересно почитать про Ghost Buttons, да и многое другое полезно было в памяти освежить.&lt;/p&gt;

&lt;h3 id=&#34;primary-secondary-action-buttons&#34;&gt;Primary &amp;amp; Secondary Action Buttons&lt;/h3&gt;

&lt;p&gt;
Статья &lt;a href=&#39;https://uxplanet.org/primary-secondary-action-buttons-c16df9b36150&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Primary &amp;amp; Secondary Action Buttons&lt;/a&gt; обращает
внимание на то, что в разных ситуациях кнопки могут и должны выглядеть по-разному. Пример &amp;mdash; кнопка &amp;ldquo;безвозвратного&amp;rdquo; удаления чего-либо.&lt;/p&gt;

&lt;p&gt;Также, мне понравилась глава &amp;ldquo;Secondary Actions as Disabled Buttons&amp;rdquo; &amp;mdash; сам недавно думал над схожими вопросами.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Релиз TypeScript 2.0</title>
      <link>https://yarfullstack.com/post/2016-09/typescript-2-release/</link>
      <pubDate>Thu, 22 Sep 2016 23:12:42 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-09/typescript-2-release/</guid>
      <description>&lt;p&gt;Команда разработки TypeScript радует своими темпами &amp;mdash; в начале месяца я &lt;a href=&#34;https://yarfullstack.com/post/2016-09/typescript-2/&#34;&gt;писал про TypeScript 2.0 RC&lt;/a&gt;,
а сегодня они &lt;a href=&#39;https://blogs.msdn.microsoft.com/typescript/2016/09/22/announcing-typescript-2-0/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;сделали релиз 2.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;В общем-то, на этом можно и закончить, но кому интересно &amp;mdash; можете почитать краткий пересказ анонса про основные фичи.&lt;/p&gt;

&lt;h3 id=&#34;урощённое-подключение-d-ts&#34;&gt;Урощённое подключение .d.ts&lt;/h3&gt;

&lt;p&gt;Вот так просто можно теперь &amp;ldquo;типизировать&amp;rdquo; пакет из npm:&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;npm install -s @types/lodash
&lt;/div&gt;

&lt;h3 id=&#34;запрет-null-для-значений&#34;&gt;Запрет null для значений&lt;/h3&gt;

&lt;p&gt;Добавлен режим &amp;ldquo;&amp;mdash;strictNullChecks&amp;rdquo;, при включении которого необходимо явно указывать для типа, что значения могут быть
null или undefined, например так:&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;let x: number | null;
&lt;/div&gt;

&lt;p&gt;Зачем это сделано, думаю, вы и сами догадались.&lt;/p&gt;

&lt;h3 id=&#34;добавлен-анализ-ветвлений&#34;&gt;Добавлен анализ ветвлений&lt;/h3&gt;

&lt;p&gt;Пример:&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;let result: number;
if (condition) {
    result = computeImportantStuff();
}

// Whoops! &#39;result&#39; might never have been initialized!
return result;
&lt;/div&gt;

&lt;h3 id=&#34;свойства-только-для-чтения&#34;&gt;Свойства только для чтения&lt;/h3&gt;

&lt;p&gt;Раньше не было, теперь добавили:&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;class Person {
    readonly name: string;

    constructor(name: string) {
        this.name = name;
    }
}

// Error! &#39;name&#39; is read-only.
new Person(&#34;Daniel&#34;).name = &#34;Dan&#34;;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>