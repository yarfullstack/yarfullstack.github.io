<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>YarFullStack</title>
    <link>https://yarfullstack.com/index.xml</link>
    <description>Recent content on YarFullStack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <copyright>© 2016 OlegAxenow. &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34; rel=&#34;nofollow&#34; class=&#34;mb-ml&#34; target=&#34;_blank&#34;&gt;Some rights reserved.&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 25 Nov 2016 12:59:32 +0300</lastBuildDate>
    <atom:link href="https://yarfullstack.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Отладка и тестирование вёрстки</title>
      <link>https://yarfullstack.com/post/2016-11/css-debug-and-testing/</link>
      <pubDate>Fri, 25 Nov 2016 12:59:32 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-11/css-debug-and-testing/</guid>
      <description>&lt;p&gt;Сегодня небольшая подборка информации для тех, кому интересна тема тестирования и отладки вёрстки.
Disclaimer: некоторые статьи читал давно (возможно что-то устарело), не всеми советами пользовался, однако статьи, безусловно, полезные.
&lt;/p&gt;

&lt;h3 id=&#34;chrome-dev-tools&#34;&gt;Chrome Dev Tools&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#39;https://hackernoon.com/twelve-fancy-chrome-devtools-tips-dc1e39d10d9d&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Twelve Fancy Chrome DevTools Tips&lt;/a&gt;.
Понятно, что статья не всеобъемлющая, но некоторые советы очень даже полезные.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://habrahabr.ru/post/254007/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;15 советов и хитростей инструментов разработчика Chrome, которые вы обязаны знать&lt;/a&gt;.
Другой набор советов.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://habrahabr.ru/post/253359/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Справочник методов console в JS&lt;/a&gt;.
Статья 2015 года, некоторых новшеств там нет, но она очень удобно структурирована и рассматриваются все основные браузеры (а также Node.js).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;http://bgrins.github.io/devtools-snippets/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;DevTools Snippets&lt;/a&gt;. Коллекция сниппетов (Source / Snippets в Chrome Dev Tools).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Отдельный совет касается галочки Async в Sources / Call stack.
Её включение позволяет увидеть полный стек вызовов (например, перейти из обработчика setTimeout/setInterval к коду, который его установил).
Анализируя стек вызовов, можно посмотреть значения переменных в любой точке выполнения.&lt;/p&gt;

&lt;h3 id=&#34;отладка-css&#34;&gt;Отладка CSS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#39;https://benfrain.com/debugging-css/%20&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Debugging CSS&lt;/a&gt; &amp;mdash; отличная статья, особенно для таких как я &amp;mdash;
кто занимается проблемами с вёрсткой далеко не каждый день. Можно последовательно читать, когда сам сходу не разобрался &amp;mdash; есть вероятность,
что найдёшь что-то подходящее.&lt;/p&gt;

&lt;h3 id=&#34;автоматизация-теситрования&#34;&gt;Автоматизация теситрования&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#39;https://www.smashingmagazine.com/2016/06/the-art-of-layout-testing-with-galen-framework/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;The Art Of Layout Testing With Galen Framework&lt;/a&gt; &amp;mdash; интересный фреймворк.
Пока не было случая попробовать, но по описанию очень понравилось. Если кто-то уже пробовал &amp;mdash; &lt;strong&gt;поделитесь отзывами, пожалуйста.&lt;/strong&gt;
Можно в &lt;a href=&#39;https://twitter.com/yarfs/status/802096880490610688&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;https://github.com/mapbox/pixelmatch&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Pixelmatch. The smallest, simplest and fastest JavaScript pixel-level image comparison library&lt;/a&gt;.
Из названия, думаю, всё понятно, где можно применить &amp;mdash; тоже :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MSSQL 2016 SP1 - теперь enterprise-фичи и в стандартных редакциях!</title>
      <link>https://yarfullstack.com/post/2016-11/sql-2016-sp1-enterprise-features/</link>
      <pubDate>Thu, 17 Nov 2016 13:10:32 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-11/sql-2016-sp1-enterprise-features/</guid>
      <description>&lt;p&gt;Давно меня так не радовал Microsoft. И я не про новую студию и прочие плюшечки, и даже не про &lt;a href=&#39;https://www.microsoft.com/en-us/sql-server/sql-server-vnext-including-Linux&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;MSSQL on Linux&lt;/a&gt; , а про
&lt;a href=&#39;https://blogs.msdn.microsoft.com/sqlreleaseservices/sql-server-2016-service-pack-1-sp1-released/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;выход Microsoft SQL Server 2016 SP1&lt;/a&gt;.
Они просто взяли и включили большинство enterprise-фич во &lt;strong&gt;все&lt;/strong&gt; редакции MSSQL! Можете просто прочитать статью по ссылке,
ниже табличка с фичами и ещё несколько слов о паре других интересных нововведений.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://msdnshared.blob.core.windows.net/media/2016/11/111616_0403_SQLServer201.png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;прочие-нововведения&#34;&gt;Прочие нововведения&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;CREATE OR ALTER &amp;mdash; давно пора! Думаю все поняли о чём речь :)&lt;/li&gt;
&lt;li&gt;DBCC CLONEDATABASE &amp;mdash; копирование схемы БД (без данных). Не подразумевается использование клонов в продакшн.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Два простых способа сделать пользователей счастливее</title>
      <link>https://yarfullstack.com/post/2016-11/two-simple-tips-to-make-users-happier/</link>
      <pubDate>Sun, 13 Nov 2016 18:32:37 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-11/two-simple-tips-to-make-users-happier/</guid>
      <description>&lt;p&gt;Сегодня расскажу про два сравнительно простых способа как сделать ваших пользователей ещё счастливее.&lt;/p&gt;

&lt;p&gt;Как вы уже знаете, мне нравятся быстрые сайты. Летом я уже делился &lt;a href=&#34;https://yarfullstack.com/post/2016-07/site-optimization-tools/&#34;&gt;набором инструментов для оптимизации сайтов&lt;/a&gt;.
Однако, есть пара несложных приёмов, первый из которых эти инструменты вряд ли когда-нибудь догадаются посоветовать.&lt;/p&gt;

&lt;p&gt;Начнём с самого простого в &lt;em&gt;реализации&lt;/em&gt; способа.
Его &lt;em&gt;внедрение,&lt;/em&gt; правда, может отнять у вас много времени на этапе согласования в компании или с участниками вашей команды.
&lt;/p&gt;

&lt;h3 id=&#34;быстрая-загрузка-шрифтов&#34;&gt;Быстрая загрузка шрифтов&lt;/h3&gt;

&lt;p&gt;Безусловно, вам может пригодиться статья &lt;a href=&#39;https://www.filamentgroup.com/lab/font-events.html&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;How We Load Web Fonts Progressively&lt;/a&gt;.
Или, более фундаментальная &lt;a href=&#39;https://www.zachleat.com/web/comprehensive-webfonts/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;A Comprehensive Guide to Font Loading Strategies&lt;/a&gt;.
Но подождите тратить 15-30 минут вашего времени на увлекательное чтение! Я успел? :)&lt;/p&gt;

&lt;p&gt;Давайте подумаем, в чём может быть цель загрузки шрифта?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;В вашей компании есть корпоративный стиль, брендбук, строгие рекомендации и использование особенных шрифтов. Тогда читайте статьи выше и переходите к следующему разделу.&lt;/li&gt;
&lt;li&gt;Вам сказали &amp;ldquo;этот шрифт такой клёвый, лишние 100КБ никто не заметит&amp;hellip;&amp;rdquo;. Здесь ещё есть варианты на что-то повлиять. Читайте дальше.&lt;/li&gt;
&lt;li&gt;Вы выбираете какой шрифт использовать и у вас нет ярко выраженной антипатии к системным шрифтам (Segoe UI, Roboto,..). Тогда этот способ точно для вас.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Способ простой до невозможности. Что может быть быстрее загрузки шрифта, который не надо загружать? :)
Я увидел этот способ в статье &lt;a href=&#39;https://www.smashingmagazine.com/2015/11/using-system-ui-fonts-practical-guide/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Using System UI Fonts In Web Design: A Quick Practical Guide&lt;/a&gt;
как раз, когда я занимался CSS для YarFullStack. И он мне, конечно же, понравился. Справедливости ради стоит отметить, что Medium уже
не использует этот подход. Так что решайте сами.&lt;/p&gt;

&lt;p&gt;Как выглядит определение шрифтов для YarFullStack? Да очень просто:&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;font-family: -apple-system, BlinkMacSystemFont, &#34;Segoe UI&#34;, &#34;Roboto&#34;, &#34;Oxygen&#34;,
&#34;Ubuntu&#34;, &#34;Cantarell&#34;, &#34;Fira Sans&#34;, &#34;Droid Sans&#34;, &#34;Helvetica Neue&#34;, sans-serif;
&lt;/div&gt;

&lt;p&gt;Как это работает? Тоже просто. Если вы работаете на Mac OS X или iOS &amp;mdash; у вас сработает один из первых двух вариантов. Для Windows [Phone] &amp;mdash; третий и т.д.
Естественно, если вы умудрились установить всевозможные шрифты на Android &amp;mdash; тогда шрифт будет не совсем &amp;ldquo;родной&amp;rdquo;, но тоже симпатичный.&lt;/p&gt;

&lt;p&gt;Плюсы понятные &amp;mdash; грузится быстро, никаких &amp;ldquo;морганий&amp;rdquo;, никакого чтения статей на тему &amp;ldquo;а вот сейчас-то мы совсем хорошо загрузим шрифт&amp;rdquo;.
Ещё немаловажный плюс &amp;mdash; пользователь читает текст на сайте, набранный тем же шрифтом, что и остальной интерфейс.
Думаю, это должно быть приятно большинству ваших пользователей. Да, вы можете тащиться от Open Sans или Noto, однако у людей разные вкусы и это прекрасно.&lt;/p&gt;

&lt;p&gt;Какие минусы?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Брэнд &amp;mdash; если для вас &lt;strong&gt;действительно&lt;/strong&gt; критичен какой-то особенный шрифт &amp;mdash; большого выбора у вас нет.&lt;/li&gt;
&lt;li&gt;В разных системах сайт будет выглядеть немного по-разному. Однако, если вы не фанат попиксельного выравнивания табличек&amp;hellip; Да и, будем честными, чаще всего в разных системах сайт и без этого будет выглядеть немного по-разному.&lt;/li&gt;
&lt;li&gt;Вероятно, в будущем вам может захотеться добавить шрифты в список. Правда, лично я это и минусом не считаю
&amp;mdash; с учётом частоты смены системных шрифтов и критичности этой задачи.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;загрузка-картинок-в-зависимости-от-разрешения-с-помощью-srcset&#34;&gt;Загрузка картинок в зависимости от разрешения с помощью srcset&lt;/h3&gt;

&lt;p&gt;Если вкратце, этот способ позволяет не грузить на маленькие смартфончики ваши картинища, оптимизированные для Retina :)&lt;/p&gt;

&lt;p&gt;Когда я писал статью &lt;a href=&#34;https://yarfullstack.com/post/2016-10/tables-and-charts-ux/&#34;&gt;Удобное представление таблиц и диаграмм&lt;/a&gt;, понадобилось добавить довольно большие анимированные гифки.
Когда я подумал про тех, кто может читать эту статью с телефона и не на самом удачном тарифе или соединении&amp;hellip;&lt;/p&gt;

&lt;p&gt;В общем, я слышал раньше про srcset, но как-то не доводилось применять &amp;mdash; картинки обычно использовал довольно мелкие, а тут, суммарно, 3МБ&amp;hellip;
Почитал пару статей: &lt;a href=&#39;https://bitsofco.de/the-srcset-and-sizes-attributes/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Responsive Images - The srcset and sizes Attributes&lt;/a&gt;
и &lt;a href=&#39;https://css-tricks.com/responsive-images-youre-just-changing-resolutions-use-srcset/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Responsive Images: If you’re just changing resolutions, use srcset&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Сделал:
&lt;div class=&#34;microlight&#34;&gt;
&amp;lt;img src=&#34;https://yarfullstack.com/img/clear-off-the-table-small.gif&#34; alt=&#34;clear-off-the-table.gif&#34; 
    style=&#34;overflow-x:hidden&#34; 
    srcset=&#34;https://yarfullstack.com/img/clear-off-the-table.gif 800w, https://yarfullstack.com/img/clear-off-the-table-small.gif 400w&#34;
    sizes=&#34;(min-width: 1280px) 800px,
    (max-width: 1280px) and (min-width: 1024px) 600px,
    (max-width: 1024px) and (min-width: 800px) 520px, 
    (max-width:800px) 90vw, 90vw&#34;&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Принцип работы такой: вы указываете отдельно набор картинок с шириной и на каких разрешениях какая ширина предпочтительнее.
Браузер учитывает ваши пожелания (но может их немного оптимизировать, на своё усмотрение). В простых случаях sizes можно не указывать.
Мне пригодилось, потому что на малых разрешениях дефолтные 100vw выглядели не очень хорошо.&lt;/p&gt;

&lt;p&gt;В упрощённом варианте без sizes выглядит так:
&lt;div class=&#34;microlight&#34;&gt;&amp;lt;img src=&#34;one.png&#34;  
srcset=&#34;two.png 2x, three.png 3x, four.png 4x&#34;&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;По большому счёту, результатом я доволен. В IE не работает, но полифил прикручивать не стал из-за потенциальных проблем.
Открытой остаётся более сложная тема &amp;mdash; как, помимо ширины окна, определить, действительно ли нужна маленькая картинка.&lt;/p&gt;

&lt;p&gt;Да, чуть не забыл, вроде в HTML 5.1 для &amp;lt;picture&amp;gt; тоже будет нормально работать srscset. Just FYI.&lt;/p&gt;

&lt;h3 id=&#34;резюме&#34;&gt;Резюме&lt;/h3&gt;

&lt;p&gt;Подумайте, что ещё вы можете сделать для ваших пользователей. Может, есть что-то, что не особо нужно никому кроме вас самих,
а без этого сайт станет немного легче и удобнее?&lt;/p&gt;

&lt;p&gt;Например, я лично стараюсь держать себя в руках и, несмотря на многочисленные рекомендации, не добавлять КПДВ к статьям :)&lt;/p&gt;

&lt;p&gt;Ещё в планах выбрать другой вариант обратной связи и отстрелить этот тормозной Disqus&amp;hellip;
Есть идеи? Может в соцсетях обсуждать? Пишите комментарии в &lt;del&gt;этот тормозной&lt;/del&gt; Disqus или в &lt;a href=&#39;https://twitter.com/yarfs/status/797845954800078848&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Интересное в октябре</title>
      <link>https://yarfullstack.com/post/2016-10/interesting/</link>
      <pubDate>Fri, 28 Oct 2016 09:56:03 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-10/interesting/</guid>
      <description>&lt;p&gt;Сегодня &lt;del&gt;бессвязная&lt;/del&gt; подборка слабо связанных между собой новостей и заметок, которые мне показались мне интересными.
Про повторное использование кода, Next.js и Yarn.&lt;/p&gt;

&lt;h3 id=&#34;о-мифическом-повторном-использовании-кода&#34;&gt;О мифическом повторном использовании кода&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#39;https://plus.google.com/&amp;#43;SergeyTeplyakov/posts/D6EnwcjUaW4&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Заметка Сергея Теплякова&lt;/a&gt; понравилась.
В принципе, мы с ним сходимся на том, что увлекаться &amp;ldquo;высокими материями&amp;rdquo; при проектировании далеко не всегда полезно :)
&lt;/p&gt;

&lt;h3 id=&#34;next-js&#34;&gt;Next.js&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#39;https://zeit.co/blog/next&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Интересный фреймворк от интересных людей.&lt;/a&gt;
Отзывов написать не могу, пока ещё не пробовал. Однако, описание интересное.
Предвосхищая ваши вопросы вида &amp;ldquo;ещё один шаблон для старта?&amp;rdquo;, &lt;a href=&#39;https://github.com/zeit/next.js&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;рекомендую посмотреть в FAQ&lt;/a&gt; раздел &amp;ldquo;Is this like create-react-app?&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;yarn&#34;&gt;Yarn&lt;/h3&gt;

&lt;p&gt;Более быстрая и (вроде бы) удобная альтернатива npm. Кто-то пищит от радости, кто-то настроен скептически&amp;hellip;
Я пока остался на npm, но, вероятно, немного позже попробую yarn. А пока набор ссылок по теме:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#39;https://yarnpkg.com/en/docs/usage&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Документация о том, как использовать&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;http://yehudakatz.com/2016/10/11/im-excited-to-work-on-yarn-the-new-js-package-manager-2/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Мнение Yehuda Katz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://shift.infinite.red/npm-vs-yarn-cheat-sheet-8755b092e5cc&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Сравнение&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://www.sitepoint.com/yarn-vs-npm/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Ещё одно сравнение&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Удобное представление таблиц и диаграмм</title>
      <link>https://yarfullstack.com/post/2016-10/tables-and-charts-ux/</link>
      <pubDate>Thu, 20 Oct 2016 21:46:43 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-10/tables-and-charts-ux/</guid>
      <description>&lt;p&gt;Прошлые две недели прошли для меня под знаком статьи &lt;a href=&#39;http://blog.darkhorseanalytics.com/clear-off-the-table&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Clear off the table&lt;/a&gt;.
Сначала увидел ссылку в комментарии к другой статье на хабре, потом ещё пара человек мне ссылку на перевод прислали.&lt;/p&gt;

&lt;p&gt;Что характерно, поскольку сама статья и анимация достаточно грамотная, у многих возникает ощущение &amp;ldquo;круто! давайте &lt;strong&gt;всё&lt;/strong&gt; так сделаем&amp;rdquo;.
Не надо так :)&lt;/p&gt;

&lt;p&gt;Собственно, о чём речь? Речь о том, что в идеале, пользователь должен быть избавлен от лишней информации и &amp;ldquo;визуального шума&amp;rdquo;.
С этим я согласен более чем абсолютно. Только всё хорошо в меру. Что предлагают авторы?&lt;/p&gt;

&lt;p&gt;Давайте посмотрим.

&lt;img src=&#34;https://yarfullstack.com/img/clear-off-the-table-small.gif&#34; alt=&#34;clear-off-the-table.gif&#34; style=&#34;overflow-x:hidden&#34; 
    srcset=&#34;https://yarfullstack.com/img/clear-off-the-table.gif 800w, https://yarfullstack.com/img/clear-off-the-table-small.gif 400w&#34;
    sizes=&#34;(min-width: 1280px) 800px, (max-width: 1280px) and (min-width: 1024px) 600px, (max-width: 1024px) and (min-width: 800px) 520px, (max-width:800px) 90vw, 90vw&#34;&gt;&lt;/p&gt;

&lt;p&gt;Когда я смотрел в первый раз, думал &amp;mdash; а потом они скажут &amp;ldquo;здесь вообще таблица не нужна, давайте текстом напишем самое важное&amp;rdquo; :)&lt;/p&gt;

&lt;p&gt;Где отлично сработает такой подход? Для презентаций, докладов и прочих материалов, где вы &lt;strong&gt;знаете&lt;/strong&gt; набор данных.
То есть, когда он статичен или почти статичен.&lt;/p&gt;

&lt;p&gt;Что делать на динамическом наборе данных? Правильный ответ, на мой взгляд &amp;mdash; необходимо принимать достаточно хорошее решение для каждого конкретного случая.
И сделать более-менее приемлемый универсальный вариант (не всегда реально проработать каждый конкретный случай, если задуматься о бюджете).&lt;/p&gt;

&lt;p&gt;Что однозначно работает всегда? Выравнивание. Правильно выровненные данные, на моей памяти, ещё никому не вредили.&lt;/p&gt;

&lt;p&gt;Что работает реже? Подбор точности для чисел и выбор ширины столбцов. Но стараться, безусловно, стоит. То же самое относится к группировке строк.&lt;/p&gt;

&lt;p&gt;Что касается &amp;ldquo;зебры&amp;rdquo; и линий &amp;mdash; иногда что-то из этого придётся оставить, особенно когда много столбцов и строк (и не всегда работает вариант &amp;ldquo;не делайте много столбцов и строк&amp;rdquo;).&lt;/p&gt;

&lt;h3 id=&#34;про-диаграммы-и-графики&#34;&gt;Про диаграммы и графики&lt;/h3&gt;

&lt;p&gt;В том же блоге есть не менее впечатляющая статья &lt;a href=&#39;http://blog.darkhorseanalytics.com/data-looks-better-naked&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Data Looks Better Naked&lt;/a&gt;.
Всё сказанное выше применимо и к этой статье (быть может, в чуть меньшей степени).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://yarfullstack.com/img/data-ink-small.gif&#34; alt=&#34;data-ink.gif&#34; style=&#34;margin-left:-1em;padding:0;&#34; 
    srcset=&#34;https://yarfullstack.com/img/data-ink.gif 640w, https://yarfullstack.com/img/data-ink-small.gif 320w&#34;
    sizes=&#34;(min-width: 1024px) 640px, (max-width: 1024px) and (min-width: 800px) 520px, (max-width:800px) 90vw, 90vw&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;мои-личные-рекомендации&#34;&gt;Мои личные рекомендации&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Думайте :)&lt;/li&gt;
&lt;li&gt;Если интересно глубокое погружение в тему &amp;mdash; почитайте Тафти. Потом мне расскажете :)&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Первые впечатления о gRPC</title>
      <link>https://yarfullstack.com/post/2016-10/gRPC-first-impressions/</link>
      <pubDate>Thu, 13 Oct 2016 21:46:12 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-10/gRPC-first-impressions/</guid>
      <description>&lt;p&gt;Помните, я &lt;a href=&#34;https://yarfullstack.com/post/2016-09/grpc-first-steps/&#34;&gt;обещал поделиться впечатлениями о gRPC&lt;/a&gt;, когда доведётся попробовать в деле?
Довелось. Сейчас поделюсь. Только уточню, что пока это впечатления с хакатона, там не будет махрового энтерпрайза, повального контроля с аудитом и тому подобного.&lt;/p&gt;

&lt;p&gt;В вопросу о хакатоне. Делал небольшую инфраструктуру для того, чтобы сделать немного счастливее наших тестировщиков.
И разработчиков, конечно, но в исторической перспективе.&lt;/p&gt;

&lt;h3 id=&#34;техническая-концепция&#34;&gt;Техническая концепция&lt;/h3&gt;

&lt;p&gt;Концепция была простая &amp;mdash; плагины к браузерам для упрощения заведения багов и набор сервисов (строго говоря &amp;mdash; пока это консольные приложения).
Цели &amp;mdash; быстро сделать прототип, получив при этом удовольствие от исследования сравнительно новых для меня технологий.
Исходя из целей, отметены были всякие консулы, grpc-gateway (для REST) &amp;mdash; в основном, всё реализовывалось &amp;ldquo;в лоб&amp;rdquo;. В тот же лес ушла &amp;ldquo;безопасность&amp;rdquo;.
Сервисы получились такие:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Central&lt;/strong&gt; &amp;mdash; серверное приложение на Go. Основная ответственность &amp;mdash; реестр подключённых сервисов (агентов). Или как модно говорить &amp;mdash; service discovery.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bot&lt;/strong&gt; &amp;mdash; серверное приложение на Go. Принимает сообщения из Rocket.Chat и может отвечать на них или отправлять новые.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Session&lt;/strong&gt; &amp;mdash; приложение на Go. Запускается на компьютере тестировщика. Помогает плагину получать дополнительную информацию (например, из Redmine) и перенаправлять команды другим агентам.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Redmine&lt;/strong&gt; &amp;mdash; серверное приложение на .NET. Предоставляет необходимые данные из Redmine (например, список проектов).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Archiver&lt;/strong&gt; &amp;mdash; приложение на .NET. Запускается на сервере БД. Умеет делать бэкапы. Юзает наш замечательный &lt;a href=&#39;http://sparesync.com/downloads.htm&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;PackDb&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deployer&lt;/strong&gt; &amp;mdash; приложение на .NET. Запускается на компьютере разработчика. Умеет восстанавливать бэкапы (без PackDb тоже не обошлось).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;что-было-использовано&#34;&gt;Что было использовано&lt;/h3&gt;

&lt;p&gt;Как видите, у меня был небольшой зоопарк из плагина к Chrome (сейчас в процессе плагин к IE), три приложения на Go и три на .NET.
Всем им, естественно, хотелось между собой общаться (ладно, не всем, но я заставил почти всех :)&lt;/p&gt;

&lt;p&gt;В такой ситуации gRPC показал себя крайне положительно, за исключением того, что в браузере он пока из коробки не работает.
С другой стороны, написать на Go простенький HTTP API Server&amp;hellip; Даже для такого ненастоящего гофера как я &amp;mdash; дело 5 минут.
По большому счёту, это потребовалось только для &amp;ldquo;session&amp;rdquo; (чтобы плагин мог получать и записывать необходимые данные) и для &amp;ldquo;bot&amp;rdquo;
(Rocket.Chat пока тоже не умеет gRPC).&lt;/p&gt;

&lt;h3 id=&#34;что-понравилось&#34;&gt;Что понравилось&lt;/h3&gt;

&lt;p&gt;Описание сервисов в proto-файлах. Действительно, описание &amp;ldquo;как бы контракта&amp;rdquo; в отдельном файле мотивирует думать над API, пока его пишешь
(хотя protobuf v3 сравнительно толерантен к изменению API). Нравится, что есть в явном виде &amp;ldquo;сообщение&amp;rdquo;, а не набор параметров. Маленький пример:
&lt;div class=&#34;microlight&#34;&gt;service CentralService {
// Registers specified Agent.
rpc Register(Agent) returns (RegisterResponse) {}
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Есть поддержка перечислений:
&lt;div class=&#34;microlight&#34;&gt;enum AgentType {
    ...
    // Redmine watching (singleton)
    Redmine		=	4;
    ...
}
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Понравилось что относительно быстро генерируются прокси (что на Go, что на .NET). Прокси достаточно удобно использовать.
Так выглядит сигнатура описанного выше метода на Go:
&lt;div class=&#34;microlight&#34;&gt;func (s *centralServer) Register(ctx context.Context, agent *a.Agent) 
    (*a.RegisterResponse, error) { ...
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;А так вызов этого метода на .NET:
&lt;div class=&#34;microlight&#34;&gt;var channel = new Channel(
    Environment.GetEnvironmentVariable(&#34;MULTIDASH&#34;), ChannelCredentials.Insecure);
var central = new CentralService.CentralServiceClient(channel);
...
central.Register(new Agent
{
    Type = AgentType.Redmine,
    Host = Environment.MachineName,
    Port = port,
    ...
});
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;И ещё (это субъективно, конечно) &amp;mdash; эстетическое удовольствие от названия командного файла generate_&lt;strong&gt;protos&lt;/strong&gt;.bat :)
С ним, пожалуй, сравнится разве что использование хранилища &amp;ldquo;bolt&amp;rdquo; для &amp;ldquo;session&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;что-не-понравилось&#34;&gt;Что не понравилось&lt;/h3&gt;

&lt;p&gt;Не понравилось то, что падает в runtime, когда передаёшь null в поле сообщения. Столкнулся с этим, когда передавал строки на C#
(в Go строки и так по умолчанию &amp;ldquo;&amp;rdquo; &amp;mdash; там такой проблемы нет). Лечится, конечно, инциализацией в пустую строку. Но осадок остался.&lt;/p&gt;

&lt;p&gt;Не столкнулся, но заочно не нравится &lt;a href=&#39;http://www.grpc.io/docs/guides/auth.html&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;скудный набор вариантов аутентификации из коробки&lt;/a&gt; (либо SSL/TLS, либо гугловый OAuth2).
Понятно, что можно реализовать свой (возможно сейчас уже плодятся проекты на GitHub, которые это делают), но хотелось бы что-то &lt;del&gt;тёплое, ламповое&lt;/del&gt; коробочное&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;резюме&#34;&gt;Резюме&lt;/h3&gt;

&lt;p&gt;В целом скорее понравилось, чем не понравилось. При случае, буду пробовать дальше.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Руководство по использованию иконок</title>
      <link>https://yarfullstack.com/post/2016-10/ux-icons/</link>
      <pubDate>Thu, 13 Oct 2016 21:30:39 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-10/ux-icons/</guid>
      <description>&lt;p&gt;Недавно прочитал статью &lt;a href=&#39;https://uxplanet.org/tips-for-using-icons-in-your-app-541a6728e7d4&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Tips for Using Icons in Your App&lt;/a&gt;.
Понравилась. Вроде всё по делу. Делюсь кратким содержанием. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Чтобы иконки были полезными, их назначение должно быть понятно пользователю. Рекомендуется правило 5 секунд (если дольше думаешь над тем, что она значит =&amp;gt; не подходит).&lt;/li&gt;
&lt;li&gt;Иконки должны быть простыми и схематичными, чтобы пользователю легче было к ним привыкнуть.&lt;/li&gt;
&lt;li&gt;Хорошо бы иконке заиметь постоянно видимое текстовое пояснение. Подтверждено многократными экспериментами.&lt;/li&gt;
&lt;li&gt;На иконки должно быть удобно нажимать (должны быть достаточно большими и с хорошими отступами).&lt;/li&gt;
&lt;li&gt;Если есть иконки для платформы, не надо придумывать свои.&lt;/li&gt;
&lt;li&gt;Тестируйте иконки! Тестировать стоит как понятность, так и запоминаемость.&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Хорошие статьи про дизайн кнопок</title>
      <link>https://yarfullstack.com/post/2016-09/ux-buttons/</link>
      <pubDate>Fri, 23 Sep 2016 14:28:45 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-09/ux-buttons/</guid>
      <description>&lt;p&gt;Хочу поделиться подборкой хороших статей про особенности дизайна кнопок.&lt;/p&gt;

&lt;h3 id=&#34;best-practices-types-and-states&#34;&gt;Best Practices, Types and States&lt;/h3&gt;

&lt;p&gt;В статье &lt;a href=&#39;https://uxplanet.org/button-ux-design-best-practices-types-and-states-647cf4ae0fc6&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Button UX Design: Best Practices, Types and States&lt;/a&gt;
есть как всем известные рекомендации, так и не очень. Для меня было интересно почитать про Ghost Buttons, да и многое другое полезно было в памяти освежить.&lt;/p&gt;

&lt;h3 id=&#34;primary-secondary-action-buttons&#34;&gt;Primary &amp;amp; Secondary Action Buttons&lt;/h3&gt;

&lt;p&gt;
Статья &lt;a href=&#39;https://uxplanet.org/primary-secondary-action-buttons-c16df9b36150&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Primary &amp;amp; Secondary Action Buttons&lt;/a&gt; обращает
внимание на то, что в разных ситуациях кнопки могут и должны выглядеть по-разному. Пример &amp;mdash; кнопка &amp;ldquo;безвозвратного&amp;rdquo; удаления чего-либо.&lt;/p&gt;

&lt;p&gt;Также, мне понравилась глава &amp;ldquo;Secondary Actions as Disabled Buttons&amp;rdquo; &amp;mdash; сам недавно думал над схожими вопросами.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Релиз TypeScript 2.0</title>
      <link>https://yarfullstack.com/post/2016-09/typescript-2-release/</link>
      <pubDate>Thu, 22 Sep 2016 23:12:42 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-09/typescript-2-release/</guid>
      <description>&lt;p&gt;Команда разработки TypeScript радует своими темпами &amp;mdash; в начале месяца я &lt;a href=&#34;https://yarfullstack.com/post/2016-09/typescript-2/&#34;&gt;писал про TypeScript 2.0 RC&lt;/a&gt;,
а сегодня они &lt;a href=&#39;https://blogs.msdn.microsoft.com/typescript/2016/09/22/announcing-typescript-2-0/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;сделали релиз 2.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;В общем-то, на этом можно и закончить, но кому интересно &amp;mdash; можете почитать краткий пересказ анонса про основные фичи.&lt;/p&gt;

&lt;h3 id=&#34;урощённое-подключение-d-ts&#34;&gt;Урощённое подключение .d.ts&lt;/h3&gt;

&lt;p&gt;Вот так просто можно теперь &amp;ldquo;типизировать&amp;rdquo; пакет из npm:&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;npm install -s @types/lodash
&lt;/div&gt;

&lt;h3 id=&#34;запрет-null-для-значений&#34;&gt;Запрет null для значений&lt;/h3&gt;

&lt;p&gt;Добавлен режим &amp;ldquo;&amp;mdash;strictNullChecks&amp;rdquo;, при включении которого необходимо явно указывать для типа, что значения могут быть
null или undefined, например так:&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;let x: number | null;
&lt;/div&gt;

&lt;p&gt;Зачем это сделано, думаю, вы и сами догадались.&lt;/p&gt;

&lt;h3 id=&#34;добавлен-анализ-ветвлений&#34;&gt;Добавлен анализ ветвлений&lt;/h3&gt;

&lt;p&gt;Пример:&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;let result: number;
if (condition) {
    result = computeImportantStuff();
}

// Whoops! &#39;result&#39; might never have been initialized!
return result;
&lt;/div&gt;

&lt;h3 id=&#34;свойства-только-для-чтения&#34;&gt;Свойства только для чтения&lt;/h3&gt;

&lt;p&gt;Раньше не было, теперь добавили:&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;class Person {
    readonly name: string;

    constructor(name: string) {
        this.name = name;
    }
}

// Error! &#39;name&#39; is read-only.
new Person(&#34;Daniel&#34;).name = &#34;Dan&#34;;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>gRPC — первые шаги</title>
      <link>https://yarfullstack.com/post/2016-09/grpc-first-steps/</link>
      <pubDate>Sun, 18 Sep 2016 14:54:10 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-09/grpc-first-steps/</guid>
      <description>&lt;p&gt;Недавно вышел релиз &lt;a href=&#39;http://www.grpc.io/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;gRPC&lt;/a&gt;.
Сегодня я расскажу о том, что это такое и почему стоит, как минимум, обратить на это внимание.
А потом расскажу, как посмотреть его в работе, используя стандартные примеры.&lt;/p&gt;

&lt;p&gt;Чтобы не было скучно от слова &amp;ldquo;стандартные&amp;rdquo;, мы будем обращаться к серверу на Go из клиента на C#.
В принципе, можно реализовать любые комбинации из языков программирования, которые поддерживаются gRPC.
Кстати, вот список поддерживаемых платформ и ЯП: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;C#&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;Java (включая Android)&lt;/li&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;Objective-C&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;что-такое-grpc&#34;&gt;Что такое gRPC&lt;/h2&gt;

&lt;p&gt;Цитата: &lt;em&gt;A high performance, open-source universal RPC framework.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Что такое Remote Procedure Call объяснять не буду, давайте разберёмся с высокой производительностью и универсальностью. Но сначала немного истории.&lt;/p&gt;

&lt;p&gt;Жил да был в Stubby &amp;mdash; инфраструктура Google для связи между большим количеством микросервисов. Шли годы, то что
было специфично для Google становилось общедоступными стандартами (вроде HTTP/2). Поэтому в Google решили переработать
Stubby и открыть код. Как вы уже догадались, gRPC использует HTTP/2, что позволяет выполнять много мелких запросов быстро
 (без открытия нового TCP-соединения).&lt;/p&gt;

&lt;p&gt;Для справки, в проекте etcd &lt;a href=&#39;https://blog.gopheracademy.com/advent-2015/etcd-distributed-key-value-store-with-grpc-http2/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;переход на gRPC&lt;/a&gt;
 дал прирост производительности приблизительно в 42 раза :) Правда, они честно признаются, что сравнимых результатов можно добиться
 и при использовании большого количества TCP-соединений на HTTP/1.x (если при этом не упрёшься в количество дескрипторов Linux или перегруз сети).&lt;/p&gt;

&lt;p&gt;Что касается универсальности, одним из объявленных принципов является применимость ко многим вариантам использования
(и незначительным отличиям в производительности относительно заточенных под этот кейс решений). Сейчас про это рано говорить,
 однако, моя интуиция говорит о том, что у них получится.&lt;/p&gt;

&lt;h2 id=&#34;принципы-и-концепция&#34;&gt;Принципы и концепция&lt;/h2&gt;

&lt;p&gt;Мотивация и принципы &lt;a href=&#39;http://www.grpc.io/blog/principles&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;описаны в документации&lt;/a&gt;, я перечислю только некоторые из них (про универсальность уже сказал выше).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Сервисы (не объекты), Сообщения (не ссылки)&lt;/strong&gt; &amp;mdash; если вкратце, то сдизайнено для микросервисов (а не аналог .NET Remoting).
Более подробно о мотивации этого решения &lt;a href=&#39;http://martinfowler.com/articles/distributed-objects-microservices.html&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;здесь&lt;/a&gt;
и &lt;a href=&#39;https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;здесь&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Широкая применимость и простота&lt;/strong&gt; &amp;mdash; поддерживаются все популярные платформы для разработки. Должно приемлемо работать на &amp;ldquo;слабых&amp;rdquo; устройствах.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Многоуровневость&lt;/strong&gt; &amp;mdash; уровни как можно более независимые (изменения в формате данных не должны ломать вызовы в приложении).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Гибкость протокола&lt;/strong&gt; &amp;mdash; концептуальная возможность замены формата сообщений (JSON, XML, Thrift, FlatBuffers), подключаемый механизм сжатия сообщений.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;protobuf-v3&#34;&gt;Protobuf v3&lt;/h2&gt;

&lt;p&gt;В gRPC используется protobuf как формат для обмена сообщениями (я уже отмечал выше, что концептуально можно использовать
что-то другое). Protobuf используется как IDL, на основе которого генерируется клиентский и серверный код на выбранном ЯП.&lt;/p&gt;

&lt;p&gt;К слову, в третьей версии (я так понял, они сделали её в основном для gRPC) protobuf получил несколько приятных плюшек:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Все поля по умолчанию опциональны.&lt;/li&gt;
&lt;li&gt;Поддерживается тип MapType (ключ+значение). Ведётся разработка по поддержке типа Any (вместо Extensions).&lt;/li&gt;
&lt;li&gt;Улучшена поддержка JSON и популярных ЯП.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;что-мне-понравилось-в-grpc-и-где-он-может-быть-эффективно-использован&#34;&gt;Что мне понравилось в gRPC и где он может быть эффективно использован&lt;/h2&gt;

&lt;p&gt;Что мне понравилось в gRPC, помимо того, что он активно используется в инфраструктуре Google (даже в TensorFlow):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Возможность использования разных платформ.&lt;/li&gt;
&lt;li&gt;Достаточно простое определение сервиса (IDL в proto-файлах).&lt;/li&gt;
&lt;li&gt;Двунаправленный стриминг, поддержка HTTP/2.&lt;/li&gt;
&lt;li&gt;Возможность подключения разных реализаций аутентификации, трассировки, балансировки и т.п. Жаль, что пока готовые реализации не очень разнообразны.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;По поводу удачных вариантов использования (если отбросить рекламные лозунги), я вижу два основных:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Эффективное объединение сервисов (особенно на разных ЯП) в микросервисной архитектуре.&lt;/li&gt;
&lt;li&gt;Мобильные клиенты, общающиеся с сервером.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;чего-нет-в-grpc&#34;&gt;Чего нет в gRPC&lt;/h2&gt;

&lt;p&gt;Как водится, серебряных пуль не бывает и gRPC не исключение. Правда, правильнее было бы добавить к заголовку &amp;ldquo;пока нет&amp;rdquo;.
Для gRPC уже достаточно много сторонних проектов и наверняка скоро станет ещё больше.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Нет поддержки работы из браузера (по крайней мере, из коробки). Всё-таки основное назначение gRPC &amp;mdash; обеспечение взаимодействия
сервисов (микросервисов). Хотя, сами понимаете, добавить поддержку gRPC в браузер, поддерживающий HTTP/2 не должно быть слишком сложно.&lt;/li&gt;
&lt;li&gt;Пока нет законченного решения для балансировки. Подробнее &lt;a href=&#39;https://github.com/grpc/grpc/blob/master/doc/load-balancing.md&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;здесь&lt;/a&gt;
и &lt;a href=&#39;https://godoc.org/google.golang.org/grpc#Balancer&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;здесь&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;В C#, например, нет стандартной возможности перехватывать вызовы (скажем, для единообразной обработки Exception).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;варианты-вызовов&#34;&gt;Варианты вызовов&lt;/h2&gt;

&lt;p&gt;В gRPC поддерживаются четыре варианта вызовов.&lt;/p&gt;

&lt;h3 id=&#34;unary-rpc&#34;&gt;Unary RPC&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Клиент вызывает (через сгенерированный код) метод на сервере, предоставляя метаданные и, если требуется &lt;a href=&#39;http://www.grpc.io/docs/guides/concepts.html#deadlines&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;deadline&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Сервер отвечает, отослав метаданные (или сначала ожидает запроса с клиента).&lt;/li&gt;
&lt;li&gt;Сервер, получив сообщение-запрос от клиента, вызывает необходимый метод и затем отсылает клиенту результат (помимо прочего, передавая статус &amp;mdash; код статуса и сообщение).&lt;/li&gt;
&lt;li&gt;Если всё в порядке, клиент получает ответ и вызов завершается. Если код статуса соответствует ошибке, она обрабатывается в зависимости от ЯП (в C# &amp;mdash; RpcException).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;server-streaming-rpc&#34;&gt;Server streaming RPC&lt;/h3&gt;

&lt;p&gt;В отличие от предыдущего случая, сервер возвращает &amp;ldquo;поток ответов&amp;rdquo;, и возвращает статус, когда все они отправлены.&lt;/p&gt;

&lt;h3 id=&#34;client-streaming-rpc&#34;&gt;Client streaming RPC&lt;/h3&gt;

&lt;p&gt;В этом случае всё наоборот &amp;mdash; клиент шлёт поток запросов, а сервер отсылает один ответ
(обычно, но необязательно, после того как получены все клиентские запросы).&lt;/p&gt;

&lt;h3 id=&#34;bidirectional-streaming-rpc&#34;&gt;Bidirectional streaming RPC&lt;/h3&gt;

&lt;p&gt;Всё как в предыдущих вариантах, только потоки у сервера и клиента независимы. И уже вам решать, как они будут взаимодействовать.
Быть может, сервер будет ждать всех запросов, чтобы начать выдавать ответы, а сервер будет играть в &amp;ldquo;пинг-понг&amp;rdquo; с клиентом&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;настройка-окружения&#34;&gt;Настройка окружения&lt;/h2&gt;

&lt;p&gt;Поскольку я работаю в Windows, дальнейшее подразумевает эту операционку. Думаю, для других ОС разница будет невелика.
Из набора примеров выбран Route Guide, как наиболее полно охватывающий все варианты вызовов.&lt;/p&gt;

&lt;h3 id=&#34;go&#34;&gt;Go&lt;/h3&gt;

&lt;p&gt;Если вы ни разу не писали на Go (или у вас версия младше 1.5) &amp;mdash; установите его, следуя &lt;a href=&#39;https://golang.org/doc/install&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;инструкциям&lt;/a&gt;.
Не забудьте установить переменную GOPATH &amp;mdash; она нам понадобится.&lt;/p&gt;

&lt;p&gt;Установите &lt;a href=&#39;https://github.com/google/protobuf/releases&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;компилятор proto-файлов — protoc&lt;/a&gt;.
Он обычно в конце списка файлов релиза с постфиксом &amp;ldquo;-win32.zip&amp;rdquo;. Затем скопируйте бинарник (protoc.exe) в папку, которая присутствует в PATH.
Я подобные приложения и небольшие утилиты обычно складываю в папку &amp;ldquo;Programs&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Итак, Go у вас установлен, теперь установите необходимые пакеты:
&lt;div class=&#34;microlight&#34;&gt;go get google.golang.org/grpc
go get -u github.com/golang/protobuf/proto
go get -u github.com/golang/protobuf/protoc-gen-go

&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Важно:&lt;/strong&gt; добавьте к PATH папку %GOPATH%\bin (в ней находится плагин protoc-gen-go.exe) и не забудьте перезапустить консоль.
В принципе, и для Go и для C# исходный код уже сгенерирован, но вдруг вы захотите добавить что-то к proto-файлам.&lt;/p&gt;

&lt;p&gt;После этого перейдите в папку c серверным кодом:
&lt;div class=&#34;microlight&#34;&gt;cd %GOPATH%\src\google.golang.org\grpc\examples\route_guide\server
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;И поменяйте порт на 50052 (в примерах на разных языках временами используются разные порты, а нам нужно подружить C# и Go):
&lt;div class=&#34;microlight&#34;&gt;var (
    ...
    port       = flag.Int(&#34;port&#34;, 50052, &#34;The server port&#34;)
)
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Теперь можно проверить, что proto-файлы компилируются и запустить сервер:
&lt;div class=&#34;microlight&#34;&gt;cd %GOPATH%\src\google.golang.org\grpc\examples\route_guide
protoc -I routeguide/ routeguide/route_guide.proto --go_out=plugins=grpc:routeguide
go run server/server.go
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Если ваш firewall забьёт тревогу, успокойте его и переходите к следующему разделу.&lt;/p&gt;

&lt;h3 id=&#34;c&#34;&gt;C#&lt;/h3&gt;

&lt;p&gt;Я использую классическую версию .NET и Visual Studio, для .NET Core всё будет немного отличаться.&lt;/p&gt;

&lt;p&gt;Выберите папку, в которую вы хотите добавить папку &amp;ldquo;grpc&amp;rdquo; с примерами и запустите в ней:
&lt;div class=&#34;microlight&#34;&gt;git clone -b v1.0.x https://github.com/grpc/grpc
cd grpc\examples\csharp\route_guide
RouteGuide.sln
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Когда студия загрузится, скомпилируйте solution. Затем запустите RouteGuideClient &amp;mdash; проще всего это сделать из студии.
Но можно и из командной строки:
&lt;div class=&#34;microlight&#34;&gt;cd RouteGuideClient/bin/Debug
RouteGuideClient.exe
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;На случай, если вы захотите добавить что-то к proto-файлам, сгенерировать исходный код по ним можно с помощью командного
файла generate_protos.bat.&lt;/p&gt;

&lt;h2 id=&#34;резюме&#34;&gt;Резюме&lt;/h2&gt;

&lt;p&gt;Моё личное мнение &amp;mdash; gRPC обязательно стоит попробовать, если вы делаете микросервисы и не сильно привязаны к альтернативам.
Альтернативы, на мой взгляд &amp;ndash; Apache Thrift и Cap&amp;rsquo;n Proto. Правда, слышал, что некоторые мигрируют с Apache Thrift на gRPC&amp;hellip;&lt;/p&gt;

&lt;p&gt;Если удастся плотно попробовать gRPC для реальной разработки &amp;mdash; обязательно расскажу. Вы тоже делитесь :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Новости дизайна и JavaScript</title>
      <link>https://yarfullstack.com/post/2016-09/js-and-design-news/</link>
      <pubDate>Fri, 16 Sep 2016 14:32:24 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-09/js-and-design-news/</guid>
      <description>&lt;p&gt;Сегодня расскажу о релизах из мира JavaScript и немного про новые веяния в типографике.&lt;/p&gt;

&lt;h3 id=&#34;angular2&#34;&gt;Angular2&lt;/h3&gt;

&lt;p&gt;Думаю, многие ждали этого момента. Некоторые мои коллеги подшучивали &amp;mdash; &amp;ldquo;да они наверное уже никогда не зарелизятся&amp;rdquo;.
Однако, &lt;a href=&#39;http://angularjs.blogspot.ru/2016/09/angular2-final.html&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;зарелизились&lt;/a&gt;.
Те кто ждал релиза, чтобы начать использовать &amp;mdash; ваше время пришло :) &lt;/p&gt;

&lt;h3 id=&#34;node-js-v6-6-0&#34;&gt;Node.js v6.6.0&lt;/h3&gt;

&lt;p&gt;На фоне предыдущей новости, &lt;a href=&#39;https://nodejs.org/en/blog/release/v6.6.0/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;этот релиз&lt;/a&gt; прошёл,
можно сказать, незаметно.&lt;/p&gt;

&lt;h3 id=&#34;webstorm-2016-3-eap&#34;&gt;WebStorm 2016.3 EAP&lt;/h3&gt;

&lt;p&gt;В WebStorm 2016.3 EAP &lt;a href=&#39;https://blog.jetbrains.com/webstorm/2016/09/webstorm-2016-3-eap-163-4396/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;добавлена поддержка Create React app и улучшена поддержка Angular2&lt;/a&gt;.
Также там &lt;a href=&#39;https://blog.jetbrains.com/webstorm/2016/08/webstorm-2016-3-early-access-preview/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;добавлена поддержка Flow и PostCSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Про PostCSS &lt;a href=&#34;https://yarfullstack.com/post/2016-06/css/&#34;&gt;я уже немного писал&lt;/a&gt;, а &lt;a href=&#39;https://blog.aria.ai/post/why-use-flow/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Flow&lt;/a&gt; вещь интересная,
но пока не довелось попробовать. Если есть опыт &amp;mdash; напишите в комментариях.&lt;/p&gt;

&lt;h3 id=&#34;variable-fonts&#34;&gt;Variable fonts&lt;/h3&gt;

&lt;p&gt;Пока это инициатива, а не реальность, но интересная. Лучше просто &lt;a href=&#39;http://blog.typekit.com/2016/09/14/variable-fonts-a-new-kind-of-font-for-flexible-design/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;почитать и посмотреть&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UX с точки зрения психологии</title>
      <link>https://yarfullstack.com/post/2016-09/ux-psychology/</link>
      <pubDate>Sun, 04 Sep 2016 12:42:32 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-09/ux-psychology/</guid>
      <description>&lt;p&gt;Сначала хотел сделать подборку статей по UX, но одна статья достойна отдельного поста.
Это &lt;a href=&#39;https://uxmag.com/articles/the-psychologists-view-of-ux-design&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;отличная статья Susan Weinschenk&lt;/a&gt;
о том, как можно применить знания психолога к UX-проектированию.&lt;/p&gt;

&lt;p&gt;Статья короткая и не даёт подробных рецептов. Зато она затрагивает многие моменты, которые не всегда очевидны для разработчиков.
Разумеется, большинство из них очевидны для UX-проектировщиков и тех, кто вечерами перечитывает книги Алана Купера :)&lt;/p&gt;

&lt;p&gt;Я попробую сжать информацию из этой статьи ещё больше, сократив или убрав некоторые пункты.
А вы уже сами решайте насколько вам полезно будет прочитать оригинал.&lt;/p&gt;

&lt;h3 id=&#34;1-люди-не-хотят-делать-или-думать-больше-чем-должны&#34;&gt;1. Люди не хотят делать или думать больше чем должны&lt;/h3&gt;

&lt;p&gt;Что может помочь:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Постепенно раскрывайте информацию;&lt;/li&gt;
&lt;li&gt;Подкрепляйте описание примерами;&lt;/li&gt;
&lt;li&gt;Проводите исследования пользователей вместо &amp;ldquo;волевых решений&amp;rdquo; на тему &amp;ldquo;нужна ли фича&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-у-людей-есть-ограничения&#34;&gt;2. У людей есть ограничения&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Подавайте информацию так, чтобы её было легко &amp;ldquo;сканировать&amp;rdquo;;&lt;/li&gt;
&lt;li&gt;Используйте заголовки и короткие блоки текста;&lt;/li&gt;
&lt;li&gt;Люди &lt;strong&gt;не&lt;/strong&gt; многозадачны.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-люди-делают-ошибки&#34;&gt;3. Люди делают ошибки&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ошибки лучше предотвращать, а не красиво обрабатывать;&lt;/li&gt;
&lt;li&gt;Если человек сделал ошибку, а система её исправила &amp;mdash; необходимо показать как именно;&lt;/li&gt;
&lt;li&gt;Имейте в виду, что UX-проектировщики тоже делают ошибки :)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;4-человеческая-память-сложна&#34;&gt;4. Человеческая память сложна&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Память это не бэкап с контрольной суммой &amp;mdash; мы реконструируем воспоминания;&lt;/li&gt;
&lt;li&gt;Негуманно заставлять пользователей помнить что-то при переходе между формами/экранами;&lt;/li&gt;
&lt;li&gt;Несмотря на распространённое мнение о 7±2, люди в среднем могут удержать в &amp;ldquo;кэше&amp;rdquo; памяти &lt;strong&gt;3-4&lt;/strong&gt; вещи.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;5-люди-социальны&#34;&gt;5. Люди социальны&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Для человека важно социальное подтверждение, вот почему популярны рейтинги и ревью;&lt;/li&gt;
&lt;li&gt;Люди охотнее что-то сделают, если сначала вы им дадите что-то полезное;&lt;/li&gt;
&lt;li&gt;Люди запрограммированы на имитацию. Можно им показать, как кто-то другой делает то, что вы хотите от них.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;7-внимание&#34;&gt;7. Внимание&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Люди обращают внимание на новое или &lt;strong&gt;отличающееся&lt;/strong&gt; от остального;&lt;/li&gt;
&lt;li&gt;Однако, надо учитывать, что люди могут не заметить даже значимых изменений, если сфокусированы на чём-то другом.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Кстати, вы обратили внимание, что я &amp;ldquo;сломал&amp;rdquo; в этом разделе нумерацию заголовков? :)&lt;/p&gt;

&lt;h3 id=&#34;6-люди-жаждут-информации&#34;&gt;6. Люди жаждут информации&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Поглощение большего объёма информации, чем человек может обработать, стимулируется дофамином;&lt;/li&gt;
&lt;li&gt;Людям нужна обратная связь о том, что происходит.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;8-большая-часть-умственной-деятельности-бессознательная&#34;&gt;8. Большая часть умственной деятельности &amp;mdash; бессознательная&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Лучше подтвердить маленькое действие, чем большой набор действий;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Эмоциональный мозг&amp;rdquo; сильно влияет на принятие решений, поэтому и рекомендуют размещать картинки (особенно те, на которых люди);&lt;/li&gt;
&lt;li&gt;Часто &amp;ldquo;сознательный мозг&amp;rdquo; вообще не принимает участия в принятии решений.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;9-люди-создают-ментальные-модели&#34;&gt;9. Люди создают ментальные модели&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ментальная модель, которая есть у человека относительно текущей задачи, делает использование вашего интерфейса проще или сложнее.&lt;/li&gt;
&lt;li&gt;Поэтому либо интерфейс должен соответствовать этой модели, либо вы должны научить пользователя другой модели
(выявление ментальных моделей &amp;mdash; одна из основных задач исследований пользователей);&lt;/li&gt;
&lt;li&gt;Метафоры помогают пользователю понять вашу модель.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;10-визуальная-система&#34;&gt;10. Визуальная система&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Делайте размер шрифта достаточно большим, а количество декоративных деталей достаточно маленьким, чтобы было удобно читать;&lt;/li&gt;
&lt;li&gt;Люди активно используют периферическое зрение, поэтому не стоит слепо полагаться на eye-tracking в исследованиях.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>TypeScript 2.0 RC</title>
      <link>https://yarfullstack.com/post/2016-09/typescript-2/</link>
      <pubDate>Thu, 01 Sep 2016 20:35:25 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-09/typescript-2/</guid>
      <description>&lt;p&gt;Недавно прочитал про выход &lt;a href=&#39;https://blogs.msdn.microsoft.com/typescript/2016/08/30/announcing-typescript-2-0-rc/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;TypeScript 2.0 RC&lt;/a&gt;.
Делюсь фичами, которые мне понравились.&lt;/p&gt;

&lt;h3 id=&#34;tagged-unions&#34;&gt;Tagged Unions&lt;/h3&gt;

&lt;p&gt;Интереснейшая фишка, которая, в том числе, позволяет делать другие интересные фишки. 
Давайте посмотрим на примере.
&lt;div class=&#34;microlight&#34;&gt;interface Circle {
    kind: &#34;circle&#34;;
    radius: number;
}

interface Square {
    kind: &#34;square&#34;;
    sideLength: number;
}

type Shape = Circle | Square;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Ключевой момент здесь &amp;mdash; поле &lt;strong&gt;kind&lt;/strong&gt;, значение которого зафиксировано (за счёт строкового литерального типа) и разное для разных типов.
Пока ничего экстраординарного. Однако, посмотрите на следующий блок кода, где TypeScript сам догадывается, какой тип используется для каждого кейса:
&lt;div class=&#34;microlight&#34;&gt;function getArea(shape: Shape) {
    switch (shape.kind) {
        case &#34;circle&#34;:
            // &#39;shape&#39; is a &#39;Circle&#39; here.
            return Math.PI * shape.radius ** 2;

        case &#34;square&#34;:
            // &#39;shape&#39; is a &#39;Square&#39; here.
            return shape.sideLength ** 2;
    }
}
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Неплохо?&lt;/p&gt;

&lt;h3 id=&#34;новые-литеральные-типы&#34;&gt;Новые литеральные типы&lt;/h3&gt;

&lt;p&gt;В TypeScript 1.8 были добавлены строковые литеральные типы. Теперь можно сделать литеральными boolean, number и enum.
Помимо таких забавных применений:
&lt;div class=&#34;microlight&#34;&gt;type Digit = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
let nums: Digit[] = [1, 2, 4, 8];

// Error! &#39;16&#39; isn&#39;t a &#39;Digit&#39;!
nums.push(16);
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Есть более интересные варианты. Давайте вспомним про tagged unions.
Допустим, мы хотим возвращать либо экземпляр типа, либо причину ошибки. При этом, сохраняя проверку типов &amp;mdash; основную ценность TypeScript по сравнению с обычным JavaScript.
&lt;div class=&#34;microlight&#34;&gt;interface Success&lt;T&gt; {
    success: true;
    value: T;
}

interface Failure {
    success: false;
    reason: string;
}

type Result&lt;T&gt; = Success&lt;T&gt; | Failure;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Теперь, в зависимости от значения поля success, TypeScript будет автоматически выводить тип в подобных ситуациях:
&lt;div class=&#34;microlight&#34;&gt;declare function tryGetNumUsers(): Result&lt;number&gt;;
            
let result = tryGetNumUsers();
if (result.success === true) {
    // &#39;result&#39; has type &#39;Success&lt;number&gt;&#39;
    console.log(`${result.value} users here`);
}
else {
    // &#39;result&#39; has type &#39;Failure&#39;
    console.error(&#34;Error fetching number of users!&#34;,
        result.reason);
}
&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;резюме&#34;&gt;Резюме&lt;/h3&gt;

&lt;p&gt;Это, на мой взгляд, наиболее интересные нововведения в TypeScript 2.0 после беты.
Полный &lt;a href=&#39;https://github.com/Microsoft/TypeScript/wiki/What%27s-new-in-TypeScript&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;список новых фич в TypeScript 2.0&lt;/a&gt;,
разумеется, более впечатляющий.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Подборка из 3 интереснейших твитов по UX и Usability</title>
      <link>https://yarfullstack.com/post/2016-08/ux-best-tweets/</link>
      <pubDate>Fri, 26 Aug 2016 14:12:37 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-08/ux-best-tweets/</guid>
      <description>&lt;p&gt;Сегодня предлагаю вашему вниманию несколько наиболее полезных, на мой взгляд, недавних твитов
 &lt;a href=&#39;https://twitter.com/lukew&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Luke Wroblewski&lt;/a&gt; на тему Usability и UX.
Если вы не в курсе о том, кто это, &lt;del&gt;вы серьёзно?&lt;/del&gt; крайне рекомендую посмотреть, как минимум, эти твиты&lt;/p&gt;

&lt;p&gt;Скажу сразу, спорить на тему границ UX и Usability считаю неблагодарным занятием,
 поэтому просто оставлю эти два термина вместе :) &lt;/p&gt;

&lt;h3 id=&#34;про-нарушение-apple-своих-же-правил-ради-понятности-интерфейса&#34;&gt;Про нарушение Apple своих же правил ради понятности интерфейса&lt;/h3&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Even Apple “breaks” their guidelines for improved clarity/usability. Consistency isn’t the goal. Predictability is. &lt;a href=&#34;https://t.co/tDtnSeVg5M&#34;&gt;pic.twitter.com/tDtnSeVg5M&lt;/a&gt;&lt;/p&gt;&amp;mdash; Luke Wroblewski (@lukew) &lt;a href=&#34;https://twitter.com/lukew/status/765603800862167041&#34;&gt;August 16, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;Полностью согласен. Джентельмены следуют правилам, но если правила не устраивают джентельменов&amp;hellip; :)
Обратите внимание на изменения (стоит открыть картинку полностью). Возможно, в одном из ваших проектов стоит сделать то же самое.&lt;/p&gt;

&lt;h3 id=&#34;про-преимущество-текста-над-иконками&#34;&gt;Про преимущество текста над иконками&lt;/h3&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Words always beat icons for clarity. &lt;br&gt;So why are there still so many icons in software/UI design? [1/2] &lt;a href=&#34;https://t.co/qLvpCjZ6NG&#34;&gt;pic.twitter.com/qLvpCjZ6NG&lt;/a&gt;&lt;/p&gt;&amp;mdash; Luke Wroblewski (@lukew) &lt;a href=&#34;https://twitter.com/lukew/status/760951363291353088&#34;&gt;August 3, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Top two excuses: not enough room on screen for words &amp;amp; difficulty localizing text. [2/2] &lt;a href=&#34;https://t.co/MVJdyiXBW4&#34;&gt;pic.twitter.com/MVJdyiXBW4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Luke Wroblewski (@lukew) &lt;a href=&#34;https://twitter.com/lukew/status/760951449337499653&#34;&gt;August 3, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;Тоже извечная тема, особенно учитывая, что у продукта всегда будут пользователи-новички (если им, конечно, вообще будут пользоваться).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Внимание! TransactionScope по умолчанию включает Serializable.</title>
      <link>https://yarfullstack.com/post/2016-08/transaction-scope-serializable/</link>
      <pubDate>Thu, 18 Aug 2016 22:36:28 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-08/transaction-scope-serializable/</guid>
      <description>&lt;p&gt;Сегодня о TransactionScope, уровне изоляции транзакций Serializable и дырявых абстракциях.&lt;/p&gt;

&lt;p&gt;Вообще говоря, я раньше много раз сталкивался с распределёнными транзакциями.
В какой-то момент я окончательно сформировал своё мнение по этой теме. Получилось что-то вроде: &amp;ldquo;хватит, я не буду их использовать вообще, разве что в ход со стороны оппонента пойдут огнестрельное оружие и прочие нечестные аргументы&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;По этой причине моё знакомство с &lt;a href=&#39;https://msdn.microsoft.com/en-us/library/system.transactions.transactionscope%28v=vs.110%29.aspx&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;TransactionScope&lt;/a&gt;
свелось к его использованию в интеграционных тестах (без распределённой составляющей, просто для удобного отката транзакций)
 и редким спорам с коллегами. Но сегодня, внезапно&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;разговор-на-работе&#34;&gt;Разговор на работе&lt;/h3&gt;

&lt;p&gt;Вообще говоря, в появлении этого текста на свет основная заслуга Макса (&lt;a href=&#39;https://twitter.com/force_net&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;@force_net&lt;/a&gt;).
С ним сегодня сначала говорили про &lt;a href=&#39;https://msdn.microsoft.com/en-us/library/tcbchxcb%28v=vs.110%29.aspx&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Snapshot Isolation&lt;/a&gt;,
потом перешли на TransactionScope. И говорит Макс &amp;mdash; &lt;strong&gt;&amp;ldquo;там ведь Serializable по умолчанию&amp;rdquo;.&lt;/strong&gt;&lt;br /&gt;
Я говорю &amp;mdash; &amp;ldquo;да ладно, нелогично же &amp;mdash; без него Read Committed по умолчанию&amp;rdquo;. Так, слово за слово, решили проверить.&lt;/p&gt;

&lt;h3 id=&#34;лирическое-отступление&#34;&gt;Лирическое отступление&lt;/h3&gt;

&lt;p&gt;На случай, если вы мало сталкивались с БД, про уровни изоляции есть вполне сносная, хотя не всем с первого раза понятная документация.
Поэтому лучше дам ссылку на &lt;a href=&#39;https://en.wikipedia.org/wiki/Isolation_%28database_systems%29&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;общее описание от википедии&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Если вкратце, применимость Serializable в web-приложениях не очень высокая &amp;mdash; слишком много блокировок. Когда мы с Максом обсуждали эти особенности,
 он привёл пример &amp;ldquo;то есть если один заказывает билеты на фильм, то блокируются на всякий случай все места, а второй будет ждать&amp;hellip;&amp;rdquo;
 &amp;ldquo;&amp;hellip; пока фильм не &lt;del&gt;выложат на торрентах&lt;/del&gt; выйдет на DVD&amp;rdquo;, продолжил я :)&lt;/p&gt;

&lt;p&gt;Постараюсь чуть позже написать более подробную статью на тему уровней изоляции.&lt;/p&gt;

&lt;h3 id=&#34;результаты-проверки&#34;&gt;Результаты проверки&lt;/h3&gt;

&lt;p&gt;Как я уже говорил, TransactionScope пользовался давно и редко. Поэтому я несколько удивился, увидев подтверждение упомянутому феномену.
Сказал я Максу что-то вроде &amp;mdash; &amp;ldquo;с чего-бы высокомудрые архитекторы и разработчики такой нетрадиционный способ обратной совместимости выбрали?&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;А он в меня &lt;a href=&#39;http://stackoverflow.com/questions/11292763/why-is-system-transactions-transactionscope-default-isolationlevel-serializable&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;ссылкой кидает&lt;/a&gt;.
Ладно, теперь понятны хотя бы предпосылки этого не самого логичного решения &amp;mdash; предпочли выбрать поведение по умолчанию как в MS DTC, а не как
в MS SQL и System.Data.SqlClient. Но, чёрт возьми, почему я не вижу рядом с названием класса
слов &amp;ldquo;по умолчанию использует уровень изоляции Serializable&amp;rdquo; большими красными буквами?
&lt;a href=&#39;https://msdn.microsoft.com/en-us/library/system.transactions.transactionscope%28v=vs.110%29.aspx&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;В документации класса &lt;/a&gt; вообще Serializable не упомянули :(&lt;/p&gt;

&lt;h3 id=&#34;выводы&#34;&gt;Выводы&lt;/h3&gt;

&lt;p&gt;Если вы подсели на &amp;ldquo;синтаксическое сладкое&amp;rdquo;, любите async/await (предпочитая не погружаться в детали его работы) и используете
TransactionScope из коробки в production &amp;mdash; ваше дело. Я больше скажу, даже MS DTC вы можете использовать из приложения в ASP.NET.
Да хоть мигающий фиолетовый текст на жёлтом фоне. Кто я такой, чтобы вам указывать? :)&lt;/p&gt;

&lt;p&gt;Однако, &lt;strong&gt;подумайте над переопределением уровня изоляции транзакций для TransactionScope.&lt;/strong&gt;
Разумеется, я согласен, что для каких-то решений Serializable будет правильным выбором.
Главное, чтобы выбор был осознанным&amp;hellip;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>