<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Performance on YarFullStack</title>
    <link>https://yarfullstack.com/tags/performance/</link>
    <description>Recent content in Performance on YarFullStack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <copyright>© 2016 OlegAxenow. &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34; rel=&#34;nofollow&#34; class=&#34;mb-ml&#34; target=&#34;_blank&#34;&gt;Some rights reserved.&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 06 Aug 2016 15:04:54 +0300</lastBuildDate>
    <atom:link href="https://yarfullstack.com/tags/performance/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Улучшаем производительность npm-install нестандартным способом</title>
      <link>https://yarfullstack.com/post/2016-08/improve-npm-performance-with-progress-bar/</link>
      <pubDate>Sat, 06 Aug 2016 15:04:54 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-08/improve-npm-performance-with-progress-bar/</guid>
      <description>

&lt;p&gt;В последнее время всё чаще сталкиваюсь с разработкой на node.js.
На работе использую версию LTS, по понятным причинам. Дома поставил 6.3.1.&lt;/p&gt;

&lt;p&gt;Идеологически мне больше нравится третий npm &amp;mdash; всё-таки хранить дубликаты модулей, особенно когда их много &amp;mdash; не здорово.
Кстати, для старой версии ноды есть &lt;a href=&#39;https://www.npmjs.com/package/npm3&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;модуль npm3&lt;/a&gt; &amp;mdash; позволяет
(в лучших традициях партизан) использовать новый npm при установленном старом (только команды будут npm3 install и т.п.). Но сегодня речь не об этом.&lt;/p&gt;

&lt;h3 id=&#34;progress-bar&#34;&gt;Progress bar&lt;/h3&gt;

&lt;p&gt;Не знаю, насколько для вас это сюрприз, но, таки-да &amp;mdash; этот симпатичный (в третьем npm) зверёк ощутимо влияет на производительность npm install.
Я, конечно, не буду разводить драму в стиле газетных заголовков и сразу скажу, что, по моим замерам, разница в пределах 20%.
И да, progress bar можно отключить глобально в &lt;a href=&#39;https://docs.npmjs.com/files/npmrc&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;файле .npmrc&lt;/a&gt; с помощью одной строчки:
&lt;div class=&#34;microlight&#34;&gt;progress=false
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Отключать или нет? Хм. Решайте сами :) Я просто дам чуть больше информации.
В моём подопытном проекте папка node_modules занимает 160 мегабайт. Проект на стареньком SSD, интернет не самый быстрый.
Да, у меня Windows 10, проверял в cmd, ConEmu, Git Bash. Разница между консольками в пределах погрешности. Есть только визуальная разница &amp;mdash; в
Git Bash прогресс не рисуется, даже если включен :)&lt;/p&gt;

&lt;p&gt;С включённым progress bar полный npm install занимает в среднем &lt;strong&gt;25 секунд&lt;/strong&gt;, без него &amp;ndash; &lt;strong&gt;21 секунду&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Лично я себе его отключил, хотя и понимаю, что не так уж часто делаю полный npm install.
Для билдов, которые могут идти &amp;ldquo;начисто&amp;rdquo; наверное это отключение будет более востребовано.
За &lt;a href=&#39;https://github.com/npm/npm/issues/11283&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;судьбой баги&lt;/a&gt; (да, она уже давно оформлена и горячо обсуждалась)
можете последить на GitHub.&lt;/p&gt;

&lt;p&gt;Если хотите проверить разницу для своих проектов, вот скрипт для Windows:&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;npm set progress=true
rmdir node_modules /s /q
echo %TIME%
npm install
echo %TIME%
npm set progress=false
rmdir node_modules /s /q
echo %TIME%
npm install
&lt;/div&gt;

&lt;p&gt;А вот скрипт для Linux (запускал у себя на Git Bash):&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;rm -rf node_modules
npm set progress=true
time npm install
rm -rf node_modules
npm set progress=false
time npm install
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Uber-Postgres&#43;MySQL</title>
      <link>https://yarfullstack.com/post/2016-07/Uber-Postgres&#43;MySQL/</link>
      <pubDate>Fri, 29 Jul 2016 12:26:04 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-07/Uber-Postgres&#43;MySQL/</guid>
      <description>

&lt;p&gt;На этой неделе прочитал интереснейшую статью от инженеров Uber: &lt;a href=&#39;https://eng.uber.com/mysql-migration/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Why Uber Engineering Switched from Postgres to MySQL&lt;/a&gt;.
Ayende, чуть позже, написал &lt;a href=&#39;https://ayende.com/blog/175137/re-why-uber-engineering-switched-from-postgres-to-mysql&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;неплохие комментарии по этой теме&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;TL;DR Можете использовать любую СУБД, только знайте её сильные и слабые стороны.
А если выбор будет неправильным &amp;mdash; можно будет мигрировать на другую (с разным количеством боли, в зависимости от ситуации).
Postgres хорош в чтении, но проигрывает в записи. MySQL хорош в записи, но (хотя в статьях об этом не говорится &amp;mdash; это уже мой личный опыт)
оптимизатора запросов у него просто нет.&lt;/p&gt;

&lt;p&gt;Да, раз уж я говорю про личный опыт &amp;mdash; MSSQL сделает по производительности и то и другое :)
Disclaimer: я не работал активно с Postgres, с MySQL &amp;mdash; немного.&lt;/p&gt;

&lt;h3 id=&#34;забавное&#34;&gt;Забавное&lt;/h3&gt;

&lt;p&gt;Uber в 2013 опубликовал &lt;a href=&#39;https://www.yumpu.com/en/document/view/53683323/migrating-uber-from-mysql-to-postgresql&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;статью про переход с MySQL на Postgres&lt;/a&gt;.
Основная причина перехода, насколько я понял &amp;mdash; в Postgres больше функциональности и &amp;ldquo;плагинов&amp;rdquo; вроде PostGIS.&lt;/p&gt;

&lt;h3 id=&#34;подробности&#34;&gt;Подробности&lt;/h3&gt;

&lt;p&gt;Исходная статья реально интересная, авторы достаточно подробно описали концептуальные проблемы, которыми их встретил Postgres.&lt;/p&gt;

&lt;h4 id=&#34;одно-соединение-один-процесс&#34;&gt;Одно соединение &amp;ndash; один процесс&lt;/h4&gt;

&lt;p&gt;Самым шокирующим для меня стало то, что каждое соединение с базой обрабатывается в отдельном &lt;strong&gt;процессе&lt;/strong&gt;. Серьёзно? Пул потоков разве сложно было сделать?&lt;/p&gt;

&lt;h4 id=&#34;репликация&#34;&gt;Репликация&lt;/h4&gt;

&lt;p&gt;Довольно противоречивая проблема с репликацией. С одной стороны, я согласен, что концептуально могут быть проблемы с трансляцией записей на диск на низком уровне.
С другой стороны &amp;mdash; занимаешься репликацией &amp;mdash; будь готов к проблемам в любом случае. А вот проблемы с совместимостью даже минорных версий серверов при репликации &amp;mdash;
 это печаль. Хотя вроде ситуация исправляется.&lt;/p&gt;

&lt;h4 id=&#34;обновление-индексов&#34;&gt;Обновление индексов&lt;/h4&gt;

&lt;p&gt;Однако самая интересная штука &amp;mdash; это устройство индексов. В MSSQL и MySQL вторичные индексы ссылаются на первичный ключ.
При обновлении, которое не затрагивает индекс, никаких дополнительных телодвижений не совершается.&lt;/p&gt;

&lt;p&gt;В Postgres строки неизменяемые, а индексы хранят ссылки на конкретное место на диске. При чтении это даёт выигрыш.
Однако, при обновлении Postgres вынужден создавать копию строки с новыми значениями и обновлять &lt;strong&gt;все&lt;/strong&gt; индексы обновляемой таблицы.
&amp;ldquo;Старая&amp;rdquo; строка при этом продолжает занимать место, что уже менее критично (освобождается авто-вакуумом).&lt;/p&gt;

&lt;h3 id=&#34;выводы&#34;&gt;Выводы&lt;/h3&gt;

&lt;p&gt;Как я уже говорил &amp;mdash; используйте любую СУБД, только знайте её сильные и слабые стороны.
Зная это, вы сами решите, стоит ли использовать, например, Postgres для проекта с высокой нагрузкой на запись и множеством серверов, на которые
реплицируются данные.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Инструменты оптимизация сайтов (в основном, скорости загрузки)</title>
      <link>https://yarfullstack.com/post/2016-07/site-optimization-tools/</link>
      <pubDate>Fri, 01 Jul 2016 13:18:17 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-07/site-optimization-tools/</guid>
      <description>

&lt;p&gt;Сегодня поделюсь набором инструментов для оптимизации сайтов. Это больше про скорость, чем про SEO, хотя и для SEO там тоже есть много полезного.
К счастью, поисковики начали учитывать заодно и скорость загрузки сайтов при индексации.&lt;/p&gt;

&lt;p&gt;Да, вероятно я перфекционист, однако я не могу спокойно смотреть на мегабайтные картинки и сайты, загружающиеся дольше секунды при нормальном соединении.
Правда, этот сайт я пока не оптимизировал на все 100%, но в этом случае я рисковал начать писать сюда в следующем году :)&lt;/p&gt;

&lt;h3 id=&#34;varvy-seo-tool&#34;&gt;Varvy SEO tool&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#39;https://varvy.com/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Varvy SEO tool&lt;/a&gt; &amp;mdash; лучший, на мой взгляд, бесплатный многофункциональный сервис проверки сайтов.
Крайне рекомендую. В отличие от других сервисов, он и на валидность HTML посмотрит, и Accessibility проверит&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;pingdom-website-speed-test&#34;&gt;Pingdom Website Speed Test&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#39;https://tools.pingdom.com/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Pingdom Website Speed Test&lt;/a&gt; &amp;mdash; ориентирован на проверку скорости и типовых проблем.
Попроще, чем Varvy, чуть посложнее, чем PageSpeed.&lt;/p&gt;

&lt;h3 id=&#34;pagespeed&#34;&gt;PageSpeed&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#39;https://developers.google.com/speed/pagespeed/?hl=ru&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;PageSpeed&lt;/a&gt; &amp;mdash; инструмент от Google, тоже ориентирован на проверку скорости и типовых проблем.
Иногда рассказывает меньше, чем Pingdom. Есть модуль для Nginx и Apache, который обеспечивает выполнение многих рекомендаций в автоматическом режиме.
Также есть плагины для Chrome, правда, не вижу я в них особой пользы.&lt;/p&gt;

&lt;h3 id=&#34;testmysite-thinkwithgoogle-com&#34;&gt;TestMySite (thinkwithgoogle.com)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#39;https://testmysite.thinkwithgoogle.com/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;TestMySite&lt;/a&gt; &amp;mdash; ещё один инструмент от Google,
я бы сказал, что это максимально простой и красиво оформленный фасад для PageSpeed.&lt;/p&gt;

&lt;h3 id=&#34;webpagetest&#34;&gt;WebPageTest&lt;/h3&gt;

&lt;p&gt;И последний, но отнюдь не по полезности &amp;mdash; &lt;a href=&#39;http://www.webpagetest.org/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;WebPageTest&lt;/a&gt;.
Этот замечательный инструмент позволяет проверить загрузку сайта в разных условиях:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Несколько десятков вариантов расположение клиента;&lt;/li&gt;
&lt;li&gt;Десяток вариантов выбора качества internet-соединения;&lt;/li&gt;
&lt;li&gt;И ещё с десяток разных настроек, но лучше я не буду про них рассказывать, чтобы у вас был стимул посмотреть на этот сервис самим.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;На выходе получаем подробный отчёт с логом и аналогом результатов вкладки Network в Chrome. Плюс к этому, он ещё и записывает видео, на котором видно, как открывается сайт.
В общем &amp;mdash; &lt;a href=&#39;http://www.webpagetest.org/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;лучше один раз увидеть&lt;/a&gt; :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>