<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Microsoft on YarFullStack</title>
    <link>https://yarfullstack.com/tags/microsoft/</link>
    <description>Recent content in Microsoft on YarFullStack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <copyright>© 2016 OlegAxenow. &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34; rel=&#34;nofollow&#34; class=&#34;mb-ml&#34; target=&#34;_blank&#34;&gt;Some rights reserved.&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 19 Apr 2017 21:50:12 +0300</lastBuildDate>
    <atom:link href="https://yarfullstack.com/tags/microsoft/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Анонс ReactXP, React Fiber и Relay Modern</title>
      <link>https://yarfullstack.com/post/2017-04/react-fiber-reactxp-relay-modern/</link>
      <pubDate>Wed, 19 Apr 2017 21:50:12 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2017-04/react-fiber-reactxp-relay-modern/</guid>
      <description>

&lt;p&gt;Компания Microsoft удивила. На этот раз &amp;mdash; приятно удивила.
&lt;a href=&#39;https://microsoft.github.io/reactxp/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Анонсирована библиотека ReactXP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Подробности по ссылке. Если вкратце &amp;mdash; это надстройка для React Native.
Декларируется, что с ней можно будет один раз написать весь UI, за исключением &amp;ldquo;platform-specific&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Кстати, больше 4К звёзд на GitHub за 14 дней. Посмотрим, что будет дальше, и я не о звёздах :)&lt;/p&gt;

&lt;h2 id=&#34;react-fiber&#34;&gt;React Fiber&lt;/h2&gt;

&lt;p&gt;Месяц назад, в заметке &lt;a href=&#34;https://yarfullstack.com/post/2017-03/reactconf-2017/&#34;&gt;Новости ReactConf 2017&lt;/a&gt; я уже упоминал про React Fiber.
Теперь про него &lt;a href=&#39;https://techcrunch.com/2017/04/18/facebook-announces-react-fiber-a-rewrite-of-its-react-framework/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;заговорил и TechCrunch&lt;/a&gt;.
Напомню, Fiber &amp;mdash; это более продвинутая архитектура (на замену Reconciliation), делающая рендеринг инкрементальным.&lt;/p&gt;

&lt;p&gt;Ещё TechCrunch упоминает Relay Modern &amp;mdash; новую версию Relay (это фреймворк для data-driven приложений, использующий GraphQL).
Подробнее про него можно прочитать в статье &lt;a href=&#39;https://code.facebook.com/posts/1362748677097871/relay-modern-simpler-faster-more-extensible/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Relay Modern: Simpler, faster, more extensible&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Релизы Visual Studio 2017 и .NET Core</title>
      <link>https://yarfullstack.com/post/2017-03/visual-studio-2017-and-dotnetcore/</link>
      <pubDate>Fri, 10 Mar 2017 12:31:19 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2017-03/visual-studio-2017-and-dotnetcore/</guid>
      <description>

&lt;p&gt;Вы наверняка в курсе про &lt;a href=&#39;https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;релиз Visual Studio 2017&lt;/a&gt;.
Если хочется читать на русском &amp;mdash; на Хабре есть более короткая статья &lt;a href=&#39;https://habrahabr.ru/company/microsoft/blog/323452/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Visual Studio 2017 и новые возможности инструментов от Microsoft&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Давайте сначала расскажу про позитивные вещи, про негатив потом.&lt;/p&gt;

&lt;h2 id=&#34;основные-новшества-на-мой-взгляд&#34;&gt;Основные новшества (на мой взгляд)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Поддержка &lt;a href=&#39;https://blogs.msdn.microsoft.com/dotnet/2016/08/24/whats-new-in-csharp-7-0/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;C# 7.0&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;С точки зрения поддержки C# в IDE &amp;mdash; добавили ещё немного фич ReSharper :)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://blogs.msdn.microsoft.com/visualstudio/2017/03/09/live-unit-testing-in-visual-studio-2017-enterprise/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Live Unit Testing&lt;/a&gt; &amp;mdash; только для редакции Enterprise.&lt;/li&gt;
&lt;li&gt;.NET Core Tools &amp;mdash; об этом ниже.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;net-core-tools&#34;&gt;.NET Core Tools&lt;/h2&gt;

&lt;p&gt;Теперь про чашку дёгтя в бочке мёда. &lt;a href=&#39;https://blogs.msdn.microsoft.com/dotnet/2017/03/07/announcing-net-core-tools-1-0/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;выпустили .NET Core Tools 1.0&lt;/a&gt;.
Есть несколько фишечек, в статье перечислены.&lt;/p&gt;

&lt;p&gt;Про основное. В Visual Studio 2017 проекты с project.json будут заменены csproj. &lt;strong&gt;Для Visual Studio 2015 поддержки не будет.&lt;/strong&gt;
В том числе, не будет и релизов .NET Core Tools.&lt;/p&gt;

&lt;p&gt;Честно, просто нет слов. Скоро любители новых фишечек окончательно выживут из Microsoft тех, кто хоть как-то задумывается про обратную совместимость.
Ощущение, что на пользователей платной версии Visual Studio тупо забили.&lt;/p&gt;

&lt;p&gt;У меня есть ещё несколько более крепких слов по этому поводу, однако оставлю их при себе :)&lt;/p&gt;

&lt;h2 id=&#34;мелкие-улучшения&#34;&gt;Мелкие улучшения&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#39;https://blogs.msdn.microsoft.com/visualstudio/2016/10/11/shorter-solution-load-time-in-visual-studio-15/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Lightweight Solution Load&lt;/a&gt; &amp;mdash; фича для более быстрой загрузки больших solution (по умолчанию отключена).&lt;/li&gt;
&lt;li&gt;Декларируется что на 50% быстрее стартует. Лично я редко переключаюсь между проектами, но кому-то может пригодиться.&lt;/li&gt;
&lt;li&gt;Workloads &amp;mdash; &amp;ldquo;наборы инструментов&amp;rdquo;, для того, чтобы не устанавливать лишнее. Пока не попробовал, сложно судить насколько это полезнее того, что было раньше.&lt;/li&gt;
&lt;li&gt;Attach to Process Filter и Reattach to Process &amp;mdash; удобно для отладки, когда приходиться аттачиться к процессу.&lt;/li&gt;
&lt;li&gt;Run to Click &amp;mdash; возможно я чего-то не понимаю, но Ctrl+F10 делает то же самое. Для мышелюбов?&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Visual Studio - несколько трюков для Watch</title>
      <link>https://yarfullstack.com/post/2017-02/visual-studio-watch-tricks/</link>
      <pubDate>Fri, 03 Mar 2017 14:10:00 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2017-02/visual-studio-watch-tricks/</guid>
      <description>&lt;p&gt;На этой неделе я столкнулся с тем, что пришлось часто проверять сгенерированный код при отладке в Visual Studio.
Схема &amp;mdash; открыть &amp;ldquo;text visualizer&amp;rdquo;, выделить код, скопировать, вставить (по ситуации) в Notepad++ или Visual Studio &amp;mdash; надоела мне где-то через час.
Вариант напрямую копировать значение не подходил из-за эскейпинга.&lt;/p&gt;

&lt;p&gt;И я нашёл &lt;a href=&#39;https://msdn.microsoft.com/en-us/library/e514eeby%28v=vs.140%29.aspx&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;приемлемое решение проблемы&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Всё, что нужно сделать &amp;mdash; добавить в Watch после переменной &amp;ldquo;,nq&amp;rdquo; &amp;mdash; после этого можно копировать текст по правой кнопке на значении в Watch (пункт Copy Value).
Остальные варианты можно прочитать по ссылке выше. Вот то, что лично мне показалось полезным:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hidden &amp;mdash; сразу показывает и приватные поля/свойства;&lt;/li&gt;
&lt;li&gt;results &amp;mdash; для IEnumerable показывает результат выполнения, то есть не потребуется разворачивать &amp;ldquo;Results View&amp;rdquo;, скажем, для результата Enumerable.Take.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Интересные релизы</title>
      <link>https://yarfullstack.com/post/2017-02/interesting-releases/</link>
      <pubDate>Fri, 17 Feb 2017 13:18:12 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2017-02/interesting-releases/</guid>
      <description>

&lt;p&gt;Краткий рассказ про недавние релизы Go 1.8 и TensorFlow 1.0, а также предстоящий релиз Visual Studio 2017.&lt;/p&gt;

&lt;h2 id=&#34;tensorflow-1-0&#34;&gt;TensorFlow 1.0&lt;/h2&gt;

&lt;p&gt;15 февраля вышел релиз &lt;a href=&#39;https://developers.googleblog.com/2017/02/announcing-tensorflow-10.html&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;TensorFlow 1.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Важно:&lt;/strong&gt; API изменился, потребуется миграция. Но обещают, что теперь для Python будет очень стабильное API.
Прочие новшества:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Многое стало в разы быстрее.&lt;/li&gt;
&lt;li&gt;Появилось экспериментальное API для Go и Java.&lt;/li&gt;
&lt;li&gt;Совместимость с Keras.&lt;/li&gt;
&lt;li&gt;Появился &lt;a href=&#39;https://www.tensorflow.org/programmers_guide/debugger&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;отладчик tfdbg&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;go-1-8&#34;&gt;Go 1.8&lt;/h2&gt;

&lt;p&gt;16 февраля был &lt;a href=&#39;https://blog.golang.org/go1.8&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;релиз Go 1.8&lt;/a&gt;.&lt;br /&gt;
Коротко о главном (в основном это касается производительности):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Паузы при сборке мусора теперь ещё меньше (10-100 микросекунд).&lt;/li&gt;
&lt;li&gt;Компиляция по сравнению с 1.7 быстрее на 15%.&lt;/li&gt;
&lt;li&gt;Накладные расходы на defer меньше в два раза.&lt;/li&gt;
&lt;li&gt;HTTP-сервер теперь можно погасить гуманно.&lt;/li&gt;
&lt;li&gt;Изменение в языке одно &amp;ndash; теперь можно привести одну структуру к другой, &lt;a href=&#39;https://golang.org/doc/go1.8#language&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;если отличия только в тэгах&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;visual-studio-2017&#34;&gt;Visual Studio 2017&lt;/h2&gt;

&lt;p&gt;Недавно анонсировали &lt;a href=&#39;https://blogs.msdn.microsoft.com/visualstudio/2017/02/09/visual-studio-2017-launch-event-and-20th-anniversary/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;релиз VS 2017 седьмого марта&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Для интересующихся &amp;mdash; &lt;a href=&#39;https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;ссылка на release notes&lt;/a&gt;.
Если вкратце, то из ближайших изменений &amp;mdash; в основном улучшения и исправления багов для .NET Core, например &amp;mdash; &lt;a href=&#39;https://github.com/dotnet/templating&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;новый движок шаблонов&lt;/a&gt; для &lt;code&gt;dotnet new&lt;/code&gt;.
А в целом про нововведения для RC &lt;a href=&#39;https://docs.microsoft.com/en-us/visualstudio/ide/whats-new-in-visual-studio&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;можно прочитать здесь&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ещё, возможно, вам будет интересен &lt;a href=&#39;https://github.com/dotnet/core/blob/master/roadmap.md&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;.NET Core Roadmap&lt;/a&gt;.
В частности, в планах на третий квартал этого года .NET Core 2.0 и .NET Standard 2.0.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GVFS (Git Virtual File System)</title>
      <link>https://yarfullstack.com/post/2017-02/gvfs/</link>
      <pubDate>Mon, 06 Feb 2017 13:38:03 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2017-02/gvfs/</guid>
      <description>

&lt;p&gt;Microsoft &lt;a href=&#39;https://blogs.msdn.microsoft.com/visualstudioalm/2017/02/03/announcing-gvfs-git-virtual-file-system/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;анонсировала GVFS&lt;/a&gt;.&lt;br /&gt;
Можно просто почитать статью по ссылке, далее просто короткое описание.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; В Microsoft обнаружили, что на больших репозиториях (пара сотен гигабайт) Git подтормаживает :)
И написали виртуальную файловую систему, которая забирает файл только тогда, когда он действительно нужен.&lt;/p&gt;

&lt;p&gt;Disclaimer: Холивар по поводу того, Git тормозит или NTFS оставим любителям холиваров.&lt;/p&gt;

&lt;p&gt;В статье приводятся замеры &lt;strong&gt;для описанного кейса&lt;/strong&gt; (было/стало):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clone: 12 часов/5 минут&lt;/li&gt;
&lt;li&gt;checkout: 3 часа/30 секунд&lt;/li&gt;
&lt;li&gt;status: 8 минут/4 секунды&lt;/li&gt;
&lt;li&gt;commit: 30 минут/13 секунд&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;резюме&#34;&gt;Резюме&lt;/h2&gt;

&lt;p&gt;Если у вас похожий кейс с огромным репозиторием, рекомендую попробовать.
Правда, сначала рекомендую задуматься &amp;mdash; правильно ли у вас организован репозиторий.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>.NET Core и Visual Studio</title>
      <link>https://yarfullstack.com/post/2017-01/dotnet-core-and-visual-studio/</link>
      <pubDate>Thu, 19 Jan 2017 22:09:44 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2017-01/dotnet-core-and-visual-studio/</guid>
      <description>

&lt;p&gt;Сегодня про опыт (мой и моих коллег) и впечатления о .NET Core.&lt;/p&gt;

&lt;p&gt;На всякий (почти невероятный) случай кратко о том, что это такое.
Microsoft сделал фреймворк для кросcплатформенной разработки. Построил его на немного других принципах &amp;mdash; сделал более
гранулированным (говоря попросту &amp;mdash; нарезали большие DLL-ки помельче), кое-что ещё поменяли.&lt;/p&gt;

&lt;p&gt;В итоге имеем возможность писать более быстрые (в том числе, потому что не тянем лишнего) и компактные кроссплатформенные приложения.
Проверяли под Windows и Linux &amp;mdash; вполне работает. Маководов не было рядом :)&lt;/p&gt;

&lt;p&gt;Есть и щедро разбросанные ложки дёгтя.  Основная проблема &amp;mdash; пока сыровато.
10 000 попугаев в секунду это, конечно, прикольно, но редко критично (по крайней мере, для бизнес-приложений).
Давайте по порядку.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;TL;DR&lt;/em&gt; В целом, новые проекты можно аккуратно пробовать делать на .NET Core, старые и большие я бы поостерёгся мигрировать.&lt;/p&gt;

&lt;h2 id=&#34;установка&#34;&gt;Установка&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; у меня Windows 10 + Visual Studio 2015, так что рассматриваю только этот случай и на данный момент времени.
Поэтому через месяц-другой лучше свериться с сайтом.&lt;/p&gt;

&lt;p&gt;Кстати, &lt;a href=&#39;https://www.microsoft.com/net/core&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;на сайте есть удобная и понятная инструкция о том, как начать работать&lt;/a&gt;.
Я всё по ней сделал и не встретил никаких проблем. Правда, не все следуют инструкции. А зря.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Скачайте и установите &lt;a href=&#39;https://go.microsoft.com/fwlink/?LinkId=691129&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Visual Studio 2015 Update 3&lt;/a&gt; если у вас установлена более старая VS 2015.
Нет, не так. &lt;strong&gt;ОБЯЗАТЕЛЬНО СНАЧАЛА УСТАНОВИТЕ&lt;/strong&gt;, чтобы потом не тратить время на последствия.&lt;/li&gt;
&lt;li&gt;Скачайте и установите &lt;a href=&#39;https://go.microsoft.com/fwlink/?LinkID=827546&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;.NET Core 1.0.1 tools Preview 2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Не лишним будет сразу скачать и установить &lt;a href=&#39;https://go.microsoft.com/fwlink/?LinkID=836281&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;.NET Core 1.0.3 SDK&lt;/a&gt; (LTS).
Или &lt;a href=&#39;https://go.microsoft.com/fwlink/?LinkID=835014&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;.NET Core 1.1 SDK&lt;/a&gt;. Не факт, что потребуется, но вероятность хорошая.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;зрелость-экосистемы&#34;&gt;&amp;ldquo;Зрелость&amp;rdquo; экосистемы&lt;/h2&gt;

&lt;p&gt;Казалось бы, &amp;ldquo;это же .NET, что может случиться?&amp;rdquo; :)
Как вам отсутствие в нём отправки писем? Да, есть сторонний пакет &amp;mdash; &lt;a href=&#39;https://github.com/jstedfast/MailKit&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;MailKit&lt;/a&gt;.
Однако, думаю, ситуация понятна. Возникает ощущение экосистемы Node.js, но вместо выбора из десятка пакетов для почти каждой задачи &amp;mdash; один или ноль.
Я немного утрирую, конечно, что-то есть.&lt;/p&gt;

&lt;p&gt;Есть &lt;a href=&#39;https://docs.microsoft.com/en-us/dotnet/articles/standard/library&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;.NET Standard Library&lt;/a&gt; &amp;mdash; попытка специфицировать общее API для обычного .NET и Core.
Получится ли в итоге всё красиво и когда это будет, не берусь судить. Прорвёмся, я надеюсь.&lt;/p&gt;

&lt;p&gt;Пока нормально получается писать под .NET Standard 1.3 (1.4 отличается незначительно).
Но, временами, некоторые пакеты &amp;ldquo;хотят&amp;rdquo; 1.6 (не поддерживается обычным .NET).
Для микросервисной архитектуры не очень критично (достаточно дёшево сделать хоть два мелких проекта под разные версии), для монолитной может быть печальнее.&lt;/p&gt;

&lt;p&gt;В общем, ощущение, что очень уж хотелось сделать местами всё с нуля и круто и немного поторопились. Обратная совместимость? Ну, вы поняли.
И с project.json как-то неудобно получилось&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;мелкие-грабли-с-нашей-инфраструктурой&#34;&gt;Мелкие грабли с нашей инфраструктурой&lt;/h2&gt;

&lt;p&gt;Исторически сложилось, что мы используем TeamCity для билдов и NUnit для тестов.
Мне, лично, ещё нравится, когда тесты можно из ReSharper запускать.&lt;/p&gt;

&lt;p&gt;Если вкратце, из коробки просто так это всё не заработает. Про настройку билд-сервера рассказывать не буду, расскажу про настройку окружения для разработки.&lt;/p&gt;

&lt;p&gt;Чтобы запускать тесты на NUnit из командной строки (&lt;code&gt;dotnet test&lt;/code&gt;) или из студии, вам потребуется установить
&lt;a href=&#39;https://github.com/nunit/dotnet-test-nunit&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;dotnet-test-nunit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;В принципе, ничего сложного. Но если вы тоже работаете с TeamCity, не торопитесь набирать в Package Manager Console заветную строку:
&lt;div class=&#34;microlight&#34;&gt;Install-Package dotnet-test-nunit -Pre
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;На данный момент, интеграция с TeamCity будет вида &amp;ldquo;упал какой-то тест, курите логи&amp;rdquo;. В новой версии вроде должны починить.
Поэтому, устанавливаем немного модифицированный пакет:
&lt;div class=&#34;microlight&#34;&gt;Install-Package dotnet-test-nunit-teamcity -Pre
&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;резюме&#34;&gt;Резюме&lt;/h2&gt;

&lt;p&gt;Повторюсь. В целом, новые проекты можно аккуратно пробовать делать на .NET Core. Старые и большие проекты я бы поостерёгся мигрировать.&lt;/p&gt;

&lt;p&gt;И да, в микросервисной архитектуре будет немного проще сгладить некоторые &amp;ldquo;углы&amp;rdquo;.
А для тех, кто никуда не торопится, можно попробовать подождать, когда .NET Core будет поддерживать .NET Standard 2.0.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MSSQL 2016 SP1 - теперь enterprise-фичи и в стандартных редакциях!</title>
      <link>https://yarfullstack.com/post/2016-11/sql-2016-sp1-enterprise-features/</link>
      <pubDate>Thu, 17 Nov 2016 13:10:32 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-11/sql-2016-sp1-enterprise-features/</guid>
      <description>

&lt;p&gt;Давно меня так не радовал Microsoft. И я не про новую студию и прочие плюшечки, и даже не про &lt;a href=&#39;https://www.microsoft.com/en-us/sql-server/sql-server-vnext-including-Linux&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;MSSQL on Linux&lt;/a&gt; , а про
&lt;a href=&#39;https://blogs.msdn.microsoft.com/sqlreleaseservices/sql-server-2016-service-pack-1-sp1-released/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;выход Microsoft SQL Server 2016 SP1&lt;/a&gt;.
Они просто взяли и включили большинство enterprise-фич во &lt;strong&gt;все&lt;/strong&gt; редакции MSSQL! Можете просто прочитать статью по ссылке,
ниже табличка с фичами и ещё несколько слов о паре других интересных нововведений.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://msdnshared.blob.core.windows.net/media/2016/11/111616_0403_SQLServer201.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;прочие-нововведения&#34;&gt;Прочие нововведения&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CREATE OR ALTER &amp;mdash; давно пора! Думаю все поняли о чём речь :)&lt;/li&gt;
&lt;li&gt;DBCC CLONEDATABASE &amp;mdash; копирование схемы БД (без данных). Не подразумевается использование клонов в продакшн.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Релиз TypeScript 2.0</title>
      <link>https://yarfullstack.com/post/2016-09/typescript-2-release/</link>
      <pubDate>Thu, 22 Sep 2016 23:12:42 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-09/typescript-2-release/</guid>
      <description>

&lt;p&gt;Команда разработки TypeScript радует своими темпами &amp;mdash; в начале месяца я &lt;a href=&#34;https://yarfullstack.com/post/2016-09/typescript-2.0-RC/&#34;&gt;писал про TypeScript 2.0 RC&lt;/a&gt;,
а сегодня они &lt;a href=&#39;https://blogs.msdn.microsoft.com/typescript/2016/09/22/announcing-typescript-2-0/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;сделали релиз 2.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;В общем-то, на этом можно и закончить, но кому интересно &amp;mdash; можете почитать краткий пересказ анонса про основные фичи:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Упрощёно подключение .d.ts;&lt;/li&gt;
&lt;li&gt;Запрет null для значений (&amp;mdash;strictNullChecks);&lt;/li&gt;
&lt;li&gt;Добавлен анализ ветвлений;&lt;/li&gt;
&lt;li&gt;Свойства только для чтения.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;упрощённое-подключение-d-ts&#34;&gt;Упрощённое подключение .d.ts&lt;/h2&gt;

&lt;p&gt;Вот так просто можно теперь &amp;ldquo;типизировать&amp;rdquo; пакет из npm:&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;npm install -s @types/lodash
&lt;/div&gt;

&lt;h2 id=&#34;запрет-null-для-значений&#34;&gt;Запрет null для значений&lt;/h2&gt;

&lt;p&gt;Добавлен режим &amp;ldquo;&amp;mdash;strictNullChecks&amp;rdquo;, при включении которого необходимо явно указывать для типа, что значения могут быть
null или undefined, например так:&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;let x: number | null;
&lt;/div&gt;

&lt;p&gt;Зачем это сделано, думаю, вы и сами догадались.&lt;/p&gt;

&lt;h2 id=&#34;добавлен-анализ-ветвлений&#34;&gt;Добавлен анализ ветвлений&lt;/h2&gt;

&lt;p&gt;Пример:&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;let result: number;
if (condition) {
    result = computeImportantStuff();
}

// Whoops! &#39;result&#39; might never have been initialized!
return result;
&lt;/div&gt;

&lt;h2 id=&#34;свойства-только-для-чтения&#34;&gt;Свойства только для чтения&lt;/h2&gt;

&lt;p&gt;Раньше не было, теперь добавили:&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;class Person {
    readonly name: string;

    constructor(name: string) {
        this.name = name;
    }
}

// Error! &#39;name&#39; is read-only.
new Person(&#34;Daniel&#34;).name = &#34;Dan&#34;;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>TypeScript 2.0 RC</title>
      <link>https://yarfullstack.com/post/2016-09/typescript-2.0-RC/</link>
      <pubDate>Thu, 01 Sep 2016 20:35:25 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-09/typescript-2.0-RC/</guid>
      <description>

&lt;p&gt;Недавно прочитал про выход &lt;a href=&#39;https://blogs.msdn.microsoft.com/typescript/2016/08/30/announcing-typescript-2-0-rc/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;TypeScript 2.0 RC&lt;/a&gt;.
Делюсь фичами, которые мне понравились:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tagged Unions;&lt;/li&gt;
&lt;li&gt;Новые литеральные типы;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tagged-unions&#34;&gt;Tagged Unions&lt;/h2&gt;

&lt;p&gt;Интереснейшая фишка, которая, в том числе, позволяет делать другие интересные фишки.
Давайте посмотрим на примере.
&lt;div class=&#34;microlight&#34;&gt;interface Circle {
    kind: &#34;circle&#34;;
    radius: number;
}

interface Square {
    kind: &#34;square&#34;;
    sideLength: number;
}

type Shape = Circle | Square;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Ключевой момент здесь &amp;mdash; поле &lt;strong&gt;kind&lt;/strong&gt;, значение которого зафиксировано (за счёт строкового литерального типа) и разное для разных типов.
Пока ничего экстраординарного. Однако, посмотрите на следующий блок кода, где TypeScript сам догадывается, какой тип используется для каждого кейса:
&lt;div class=&#34;microlight&#34;&gt;function getArea(shape: Shape) {
    switch (shape.kind) {
        case &#34;circle&#34;:
            // &#39;shape&#39; is a &#39;Circle&#39; here.
            return Math.PI * shape.radius ** 2;

        case &#34;square&#34;:
            // &#39;shape&#39; is a &#39;Square&#39; here.
            return shape.sideLength ** 2;
    }
}
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Неплохо?&lt;/p&gt;

&lt;h2 id=&#34;новые-литеральные-типы&#34;&gt;Новые литеральные типы&lt;/h2&gt;

&lt;p&gt;В TypeScript 1.8 были добавлены строковые литеральные типы. Теперь можно сделать литеральными boolean, number и enum.
Помимо таких забавных применений:
&lt;div class=&#34;microlight&#34;&gt;type Digit = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
let nums: Digit[] = [1, 2, 4, 8];

// Error! &#39;16&#39; isn&#39;t a &#39;Digit&#39;!
nums.push(16);
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Есть более интересные варианты. Давайте вспомним про tagged unions.
Допустим, мы хотим возвращать либо экземпляр типа, либо причину ошибки. При этом, сохраняя проверку типов &amp;mdash; основную ценность TypeScript по сравнению с обычным JavaScript.
&lt;div class=&#34;microlight&#34;&gt;interface Success&lt;T&gt; {
    success: true;
    value: T;
}

interface Failure {
    success: false;
    reason: string;
}

type Result&lt;T&gt; = Success&lt;T&gt; | Failure;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Теперь, в зависимости от значения поля success, TypeScript будет автоматически выводить тип в подобных ситуациях:
&lt;div class=&#34;microlight&#34;&gt;declare function tryGetNumUsers(): Result&lt;number&gt;;
            
let result = tryGetNumUsers();
if (result.success === true) {
    // &#39;result&#39; has type &#39;Success&lt;number&gt;&#39;
    console.log(`${result.value} users here`);
}
else {
    // &#39;result&#39; has type &#39;Failure&#39;
    console.error(&#34;Error fetching number of users!&#34;,
        result.reason);
}
&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;резюме&#34;&gt;Резюме&lt;/h2&gt;

&lt;p&gt;Это, на мой взгляд, наиболее интересные нововведения в TypeScript 2.0 после беты.
Полный &lt;a href=&#39;https://github.com/Microsoft/TypeScript/wiki/What%27s-new-in-TypeScript&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;список новых фич в TypeScript 2.0&lt;/a&gt;,
разумеется, более впечатляющий.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Обновление Microsoft Visual Studio (KB3165756)</title>
      <link>https://yarfullstack.com/post/2016-07/visual-studio.KB3165756/</link>
      <pubDate>Wed, 13 Jul 2016 08:46:18 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-07/visual-studio.KB3165756/</guid>
      <description>&lt;p&gt;Недавно вышло новое обновление для Visual Studio: &lt;a href=&#39;https://msdn.microsoft.com/library/mt752379&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Update for Microsoft Visual Studio 2015 Update 3 (KB3165756)&lt;/a&gt;.
Тем, кто пользуется студией &amp;mdash; крайне рекомендую поставить &amp;mdash; исправлено с десяток багов (подробности по ссылке выше), ставится быстро, перезагрузка не требуется.
Проще всего поставить, скачав с &lt;a href=&#39;http://go.microsoft.com/fwlink/?LinkID=816878&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Microsoft Download Center&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Про мои впечатления от апдейта можно прочитать далее (что совсем необязательно, признаюсь &amp;mdash; есть небольшой баг в настройке движка для блога,
если я не поставлю эту ссылку &amp;mdash; с главной пропадёт форматирование :)&lt;/p&gt;

&lt;p&gt;Как обещал &amp;mdash; впечатления. Загружается и ставится быстро. На моём компьютере субъективно заняло минуты 2.
&lt;del&gt;После этого студия работает в 4 раза быстрее, а мои волосы стали крепкими и шелковистыми.&lt;/del&gt;
Естественно, за несколько минут работы эффект незаметен. Однако, утечкам памяти это свойственно.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Новости из мира .NET</title>
      <link>https://yarfullstack.com/post/2016-06/dotNET/</link>
      <pubDate>Fri, 24 Jun 2016 12:31:11 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-06/dotNET/</guid>
      <description>

&lt;p&gt;Сегодня в фокусе:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Основные анонсы dotnetConf 2016;&lt;/li&gt;
&lt;li&gt;Статья с хорошим примером и описанием подхода к оптимизации производительности от Джона Скита;&lt;/li&gt;
&lt;li&gt;Немного про тёмную сторону async/await :)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dotnetconf-2016&#34;&gt;dotnetConf 2016&lt;/h2&gt;

&lt;p&gt;Для многих самым ожидаемым событием июня будет релиз .NET Core и ASP.NET Core 1.0 &lt;strong&gt;27 июня 2016 года.&lt;/strong&gt;
Для тех, кто использует .NET и вообще не в курсе что это такое &amp;mdash; &lt;a href=&#39;https://dotnet.github.io/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;рекомендую ознакомиться&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Кроме этого, Мигель де Иказа анонсировал &lt;a href=&#39;https://blog.xamarin.com/live-from-dotnetconf-cycle-7-xamarin-studio-6-and-more/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;новые фичи Xamarin&lt;/a&gt;.
Сам я Xamarin не использовал, но штука сама по себе интересная.&lt;/p&gt;

&lt;p&gt;Скотт Хансельман рассказал про &lt;a href=&#39;http://www.dotnetfoundation.org/blog/cake-welcome&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Cake&lt;/a&gt; &amp;mdash;
новую систему для билдов. Я пока не вижу, где лично мне было бы полезно на неё перейти, однако, может и приживётся. Наверняка понравится тем, кому нравится Powershell.&lt;/p&gt;

&lt;h2 id=&#34;джон-скит-о-производительности&#34;&gt;Джон Скит о производительности&lt;/h2&gt;

&lt;p&gt;В статье &lt;a href=&#39;https://codeblog.jonskeet.uk/2016/06/09/tracking-down-a-performance-hit/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Tracking down a performance hit&lt;/a&gt;
Джон Скит подробно описывает подход к поиску &amp;ldquo;бутылочных горлышек&amp;rdquo; и улучшению производительности. Заодно он нашёл баг в .NET Core и NUnit :)&lt;/p&gt;

&lt;h2 id=&#34;тёмная-сторона-async-await&#34;&gt;Тёмная сторона async/await&lt;/h2&gt;

&lt;p&gt;Если вы активно используете async/await проверьте себя и скажите, что выведет следующий код:&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;await Task.Factory.StartNew(async () =&gt; { 
    await Task.Delay(10); Console.WriteLine(&#34;A&#34;); 
    });
    
Console.WriteLine(&#34;B&#34;);
&lt;/div&gt;

&lt;p&gt;Ещё одна загадка по теме и ответы в &lt;a href=&#39;https://github.com/ljw1004/blog/blob/master/Analyzers/MissingAwaitAnalyzer/MissingAwaitAnalyzer/readme.md&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;блоге автора MissingAwaitAnalyzer&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>