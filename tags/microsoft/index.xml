<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>YarFullStack</title>
    <link>https://yarfullstack.com/tags/microsoft/index.xml</link>
    <description>Recent content on YarFullStack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <copyright>© 2016 OlegAxenow. &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34; rel=&#34;nofollow&#34; class=&#34;mb-ml&#34; target=&#34;_blank&#34;&gt;Some rights reserved.&lt;/a&gt;</copyright>
    <atom:link href="https://yarfullstack.com/tags/microsoft/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MSSQL 2016 SP1 - теперь enterprise-фичи и в стандартных редакциях!</title>
      <link>https://yarfullstack.com/post/2016-11/sql-2016-sp1-enterprise-features/</link>
      <pubDate>Thu, 17 Nov 2016 13:10:32 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-11/sql-2016-sp1-enterprise-features/</guid>
      <description>&lt;p&gt;Давно меня так не радовал Microsoft. И я не про новую студию и прочие плюшечки, и даже не про &lt;a href=&#39;https://www.microsoft.com/en-us/sql-server/sql-server-vnext-including-Linux&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;MSSQL on Linux&lt;/a&gt; , а про
&lt;a href=&#39;https://blogs.msdn.microsoft.com/sqlreleaseservices/sql-server-2016-service-pack-1-sp1-released/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;выход Microsoft SQL Server 2016 SP1&lt;/a&gt;.
Они просто взяли и включили большинство enterprise-фич во &lt;strong&gt;все&lt;/strong&gt; редакции MSSQL! Можете просто прочитать статью по ссылке,
ниже табличка с фичами и ещё несколько слов о паре других интересных нововведений.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://msdnshared.blob.core.windows.net/media/2016/11/111616_0403_SQLServer201.png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;прочие-нововведения&#34;&gt;Прочие нововведения&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;CREATE OR ALTER &amp;mdash; давно пора! Думаю все поняли о чём речь :)&lt;/li&gt;
&lt;li&gt;DBCC CLONEDATABASE &amp;mdash; копирование схемы БД (без данных). Не подразумевается использование клонов в продакшн.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Релиз TypeScript 2.0</title>
      <link>https://yarfullstack.com/post/2016-09/typescript-2-release/</link>
      <pubDate>Thu, 22 Sep 2016 23:12:42 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-09/typescript-2-release/</guid>
      <description>&lt;p&gt;Команда разработки TypeScript радует своими темпами &amp;mdash; в начале месяца я &lt;a href=&#34;https://yarfullstack.com/post/2016-09/typescript-2/&#34;&gt;писал про TypeScript 2.0 RC&lt;/a&gt;,
а сегодня они &lt;a href=&#39;https://blogs.msdn.microsoft.com/typescript/2016/09/22/announcing-typescript-2-0/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;сделали релиз 2.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;В общем-то, на этом можно и закончить, но кому интересно &amp;mdash; можете почитать краткий пересказ анонса про основные фичи.&lt;/p&gt;

&lt;h3 id=&#34;урощённое-подключение-d-ts&#34;&gt;Урощённое подключение .d.ts&lt;/h3&gt;

&lt;p&gt;Вот так просто можно теперь &amp;ldquo;типизировать&amp;rdquo; пакет из npm:&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;npm install -s @types/lodash
&lt;/div&gt;

&lt;h3 id=&#34;запрет-null-для-значений&#34;&gt;Запрет null для значений&lt;/h3&gt;

&lt;p&gt;Добавлен режим &amp;ldquo;&amp;mdash;strictNullChecks&amp;rdquo;, при включении которого необходимо явно указывать для типа, что значения могут быть
null или undefined, например так:&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;let x: number | null;
&lt;/div&gt;

&lt;p&gt;Зачем это сделано, думаю, вы и сами догадались.&lt;/p&gt;

&lt;h3 id=&#34;добавлен-анализ-ветвлений&#34;&gt;Добавлен анализ ветвлений&lt;/h3&gt;

&lt;p&gt;Пример:&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;let result: number;
if (condition) {
    result = computeImportantStuff();
}

// Whoops! &#39;result&#39; might never have been initialized!
return result;
&lt;/div&gt;

&lt;h3 id=&#34;свойства-только-для-чтения&#34;&gt;Свойства только для чтения&lt;/h3&gt;

&lt;p&gt;Раньше не было, теперь добавили:&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;class Person {
    readonly name: string;

    constructor(name: string) {
        this.name = name;
    }
}

// Error! &#39;name&#39; is read-only.
new Person(&#34;Daniel&#34;).name = &#34;Dan&#34;;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>TypeScript 2.0 RC</title>
      <link>https://yarfullstack.com/post/2016-09/typescript-2/</link>
      <pubDate>Thu, 01 Sep 2016 20:35:25 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-09/typescript-2/</guid>
      <description>&lt;p&gt;Недавно прочитал про выход &lt;a href=&#39;https://blogs.msdn.microsoft.com/typescript/2016/08/30/announcing-typescript-2-0-rc/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;TypeScript 2.0 RC&lt;/a&gt;.
Делюсь фичами, которые мне понравились.&lt;/p&gt;

&lt;h3 id=&#34;tagged-unions&#34;&gt;Tagged Unions&lt;/h3&gt;

&lt;p&gt;Интереснейшая фишка, которая, в том числе, позволяет делать другие интересные фишки. 
Давайте посмотрим на примере.
&lt;div class=&#34;microlight&#34;&gt;interface Circle {
    kind: &#34;circle&#34;;
    radius: number;
}

interface Square {
    kind: &#34;square&#34;;
    sideLength: number;
}

type Shape = Circle | Square;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Ключевой момент здесь &amp;mdash; поле &lt;strong&gt;kind&lt;/strong&gt;, значение которого зафиксировано (за счёт строкового литерального типа) и разное для разных типов.
Пока ничего экстраординарного. Однако, посмотрите на следующий блок кода, где TypeScript сам догадывается, какой тип используется для каждого кейса:
&lt;div class=&#34;microlight&#34;&gt;function getArea(shape: Shape) {
    switch (shape.kind) {
        case &#34;circle&#34;:
            // &#39;shape&#39; is a &#39;Circle&#39; here.
            return Math.PI * shape.radius ** 2;

        case &#34;square&#34;:
            // &#39;shape&#39; is a &#39;Square&#39; here.
            return shape.sideLength ** 2;
    }
}
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Неплохо?&lt;/p&gt;

&lt;h3 id=&#34;новые-литеральные-типы&#34;&gt;Новые литеральные типы&lt;/h3&gt;

&lt;p&gt;В TypeScript 1.8 были добавлены строковые литеральные типы. Теперь можно сделать литеральными boolean, number и enum.
Помимо таких забавных применений:
&lt;div class=&#34;microlight&#34;&gt;type Digit = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
let nums: Digit[] = [1, 2, 4, 8];

// Error! &#39;16&#39; isn&#39;t a &#39;Digit&#39;!
nums.push(16);
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Есть более интересные варианты. Давайте вспомним про tagged unions.
Допустим, мы хотим возвращать либо экземпляр типа, либо причину ошибки. При этом, сохраняя проверку типов &amp;mdash; основную ценность TypeScript по сравнению с обычным JavaScript.
&lt;div class=&#34;microlight&#34;&gt;interface Success&lt;T&gt; {
    success: true;
    value: T;
}

interface Failure {
    success: false;
    reason: string;
}

type Result&lt;T&gt; = Success&lt;T&gt; | Failure;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Теперь, в зависимости от значения поля success, TypeScript будет автоматически выводить тип в подобных ситуациях:
&lt;div class=&#34;microlight&#34;&gt;declare function tryGetNumUsers(): Result&lt;number&gt;;
            
let result = tryGetNumUsers();
if (result.success === true) {
    // &#39;result&#39; has type &#39;Success&lt;number&gt;&#39;
    console.log(`${result.value} users here`);
}
else {
    // &#39;result&#39; has type &#39;Failure&#39;
    console.error(&#34;Error fetching number of users!&#34;,
        result.reason);
}
&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;резюме&#34;&gt;Резюме&lt;/h3&gt;

&lt;p&gt;Это, на мой взгляд, наиболее интересные нововведения в TypeScript 2.0 после беты.
Полный &lt;a href=&#39;https://github.com/Microsoft/TypeScript/wiki/What%27s-new-in-TypeScript&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;список новых фич в TypeScript 2.0&lt;/a&gt;,
разумеется, более впечатляющий.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Обновление Microsoft Visual Studio (KB3165756)</title>
      <link>https://yarfullstack.com/post/2016-07/visual-studio/</link>
      <pubDate>Wed, 13 Jul 2016 08:46:18 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-07/visual-studio/</guid>
      <description>&lt;p&gt;Недавно вышло новое обновление для Visual Studio: &lt;a href=&#39;https://msdn.microsoft.com/library/mt752379&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Update for Microsoft Visual Studio 2015 Update 3 (KB3165756)&lt;/a&gt;.
Тем, кто пользуется студией &amp;mdash; крайне рекомендую поставить &amp;mdash; исправлено с десяток багов (подробности по ссылке выше), ставится быстро, перезагрузка не требуется.
Проще всего поставить, скачав с &lt;a href=&#39;http://go.microsoft.com/fwlink/?LinkID=816878&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Microsoft Download Center&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Про мои впечатления от апдейта можно прочитать далее (что совсем необязательно, признаюсь &amp;mdash; есть небольшой баг в настройке движка для блога,
если я не поставлю эту ссылку &amp;mdash; с главной пропадёт форматирование :)&lt;/p&gt;

&lt;p&gt;Как обещал &amp;mdash; впечатления. Загружается и ставится быстро. На моём компьютере субъективно заняло минуты 2.
&lt;del&gt;После этого студия работает в 4 раза быстрее, а мои волосы стали крепкими и шелковистыми.&lt;/del&gt;
Естественно, за несколько минут работы эффект незаметен. Однако, утечкам памяти это свойственно.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Новости из мира .NET</title>
      <link>https://yarfullstack.com/post/2016-06/dotNET/</link>
      <pubDate>Fri, 24 Jun 2016 12:31:11 +0300</pubDate>
      
      <guid>https://yarfullstack.com/post/2016-06/dotNET/</guid>
      <description>&lt;p&gt;Сегодня в фокусе:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Основные анонсы dotnetConf 2016;&lt;/li&gt;
&lt;li&gt;Статья с хорошим примером и описанием подхода к оптимизации производительности от Джона Скита;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Немного про тёмную сторону async/await :)
&lt;/p&gt;

&lt;h3 id=&#34;dotnetconf-2016&#34;&gt;dotnetConf 2016&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Для многих самым ожидаемым событием июня будет релиз .NET Core и ASP.NET Core 1.0 &lt;strong&gt;27 июня 2016 года.&lt;/strong&gt;
Для тех, кто использует .NET и вообще не в курсе что это такое &amp;mdash; &lt;a href=&#39;https://dotnet.github.io/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;рекомендую ознакомиться&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Кроме этого, Мигель де Иказа анонсировал &lt;a href=&#39;https://blog.xamarin.com/live-from-dotnetconf-cycle-7-xamarin-studio-6-and-more/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;новые фичи Xamarin&lt;/a&gt;.
Сам я Xamarin не использовал, но штука сама по себе интересная.&lt;/p&gt;

&lt;p&gt;Скотт Хансельман рассказал про &lt;a href=&#39;http://www.dotnetfoundation.org/blog/cake-welcome&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Cake&lt;/a&gt; &amp;mdash;
новую систему для билдов. Я пока не вижу, где лично мне было бы полезно на неё перейти, однако, может и приживётся. Наверняка понравится тем, кому нравится Powershell.&lt;/p&gt;

&lt;h3 id=&#34;джон-скит-о-производительности&#34;&gt;Джон Скит о производительности&lt;/h3&gt;

&lt;p&gt;В статье &lt;a href=&#39;https://codeblog.jonskeet.uk/2016/06/09/tracking-down-a-performance-hit/&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;Tracking down a performance hit&lt;/a&gt;
Джон Скит подробно описывает подход к поиску &amp;ldquo;бутылочных горлышек&amp;rdquo; и улучшению производительности. Заодно он нашёл баг в .NET Core и NUnit :)&lt;/p&gt;

&lt;h3 id=&#34;тёмная-сторона-async-await&#34;&gt;Тёмная сторона async/await&lt;/h3&gt;

&lt;p&gt;Если вы активно используете async/await проверьте себя и скажите, что выведет следующий код:&lt;/p&gt;

&lt;div class=&#34;microlight&#34;&gt;await Task.Factory.StartNew(async () =&gt; { 
    await Task.Delay(10); Console.WriteLine(&#34;A&#34;); 
    });
    
Console.WriteLine(&#34;B&#34;);
&lt;/div&gt;

&lt;p&gt;Ещё одна загадка по теме и ответы в &lt;a href=&#39;https://github.com/ljw1004/blog/blob/master/Analyzers/MissingAwaitAnalyzer/MissingAwaitAnalyzer/readme.md&#39; rel=&#34;nofollow noopener noreferrer&#34; target=&#34;_blank&#34;&gt;блоге автора MissingAwaitAnalyzer&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>